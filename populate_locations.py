import asyncio
from sqlalchemy import select
from Tg_bot.app.database.models import async_session, Country, City

# Данные для наполнения. Вы можете расширить эти списки.
LOCATIONS_DATA = {
    "Беларусь": ["Минск", "Гомель", "Витебск", "Могилев", "Гродно", "Брест", "Бобруйск", "Барановичи", "Пинск", "Лида",
                 "Полоцк", "Новополоцк", "Мозырь", "Солигорск", "Молодечно", "Жлобин", "Светлогорск", "Речица",
                 "Кобрин", "Слуцк"],
    "Россия": ["Москва", "Санкт-Петербург", "Новосибирск", "Екатеринбург", "Казань", "Нижний Новгород", "Челябинск",
               "Самара", "Омск", "Ростов-на-Дону", "Уфа", "Красноярск", "Воронеж", "Пермь", "Волгоград", "Сочи",
               "Калининград", "Владивосток", "Ярославль"],
    "США": ["Нью-Йорк", "Лос-Анджелес", "Чикаго", "Хьюстон", "Майами", "Филадельфия", "Лас-Вегас", "Новый Орлеан",
            "Остин", "Сан-Франциско", "Бостон", "Сиэтл", "Денвер", "Вашингтон"],
    "Германия": ["Берлин", "Мюнхен", "Гамбург", "Кёльн", "Франкфурт-на-Майне", "Штутгарт", "Дюссельдорф", "Дортмунд",
                 "Эссен", "Лейпциг", "Бремен", "Дрезден", "Ганновер", "Нюрнберг"],
    "Франция": ["Париж", "Марсель", "Лион", "Тулуза", "Ницца", "Нант", "Страсбург", "Монпелье", "Бордо", "Лилль",
                "Ренн"],
    "Италия": ["Рим", "Милан", "Неаполь", "Турин", "Палермо", "Генуя", "Болонья", "Флоренция", "Бари", "Катания",
               "Венеция"],
    "Испания": ["Мадрид", "Барселона", "Валенсия", "Севилья", "Сарагоса", "Малага", "Мурсия", "Пальма",
                "Лас-Пальмас-де-Гран-Канария", "Бильбао", "Ибица"],
    "Великобритания": ["Лондон", "Манчестер", "Бирмингем", "Глазго", "Ливерпуль", "Лидс", "Шеффилд", "Эдинбург",
                       "Бристоль", "Кардифф"],
    "Польша": ["Варшава", "Краков", "Лодзь", "Вроцлав", "Познань", "Гданьск", "Щецин", "Быдгощ", "Люблин", "Белосток",
               "Катовице"],
    "Литва": ["Вильнюс", "Каунас", "Клайпеда", "Шяуляй", "Паневежис", "Алитус", "Мариямполе"]
}


async def populate_db():
    async with async_session() as session:
        # Проверим, есть ли уже страны в базе
        result = await session.execute(select(Country))
        if result.scalars().first() is not None:
            print("База данных локаций уже заполнена. Пропускаю.")
            return

        print("База данных локаций пуста. Начинаю заполнение...")

        for country_name, cities_list in LOCATIONS_DATA.items():
            # Создаем или находим страну
            country_result = await session.execute(select(Country).filter_by(name=country_name))
            country = country_result.scalar_one_or_none()
            if not country:
                country = Country(name=country_name)
                session.add(country)
                await session.flush()  # Получаем country.country_id

            # Добавляем города для этой страны
            for city_name in cities_list:
                city = City(name=city_name, country_id=country.country_id)
                session.add(city)

            print(f"  - Добавлена страна '{country_name}' и {len(cities_list)} городов.")

        await session.commit()
        print("Заполнение базы данных локаций завершено.")


if __name__ == "__main__":
    asyncio.run(populate_db())