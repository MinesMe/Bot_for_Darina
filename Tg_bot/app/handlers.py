from datetime import datetime
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.utils.markdown import hbold, hlink, hitalic, hcode, html_decoration

from .database import requests as db
from .database.models import async_session
from . import keyboards as kb

router = Router()


class UserSetup(StatesGroup):
    choosing_country = State()
    choosing_regions = State()


class SearchState(StatesGroup):
    waiting_for_query = State()


class SubscriptionFlow(StatesGroup):
    waiting_for_artist_name = State()


async def format_grouped_events_for_response(events: list) -> str:
    if not events:
        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    response_parts = []
    for event in events:
        title_text = html_decoration.quote(event.title)

        if event.links and event.links[0]:
            url = html_decoration.quote(event.links[0])
            title_link = f'<b><a href="{url}">{title_text}</a></b>'
        else:
            title_link = hbold(title_text)

        place_info = event.venue_name if event.venue_name else "‚Äî"

        dates_str = []
        if event.dates:
            unique_dates = sorted(list(set(d for d in event.dates if d is not None)))
            for dt in unique_dates:
                dates_str.append(dt.strftime("%d.%m.%Y –≤ %H:%M"))

        dates_info = "\n".join(f"‚ñ´Ô∏è {d}" for d in dates_str) if dates_str else "‚Äî"

        price_info = "‚Äî"
        if event.min_price and event.max_price and event.min_price != event.max_price:
            price_info = f"–æ—Ç {event.min_price} –¥–æ {event.max_price} BYN"
        elif event.min_price:
            price_info = f"–æ—Ç {event.min_price} BYN"

        event_card = (
            f"{title_link}\n\n"
            f"üìç {hbold('–ú–µ—Å—Ç–æ:')} {hitalic(place_info)}\n"
            f"üí∞ {hbold('–¶–µ–Ω–∞:')} {hitalic(price_info)}\n\n"
            f"üìÖ {hbold('–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã:')}\n{hitalic(dates_info)}"
        )
        response_parts.append(event_card)

    separator = "\n\n" + "‚Äî" * 15 + "\n\n"
    return separator.join(response_parts)


async def format_events_for_response(events: list) -> str:
    if not events:
        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    response_parts = []
    for event in events:
        if event.links:
            url = html_decoration.quote(event.links[0].url)
            title = html_decoration.quote(event.title)
            title_link = f'<b><a href="{url}">{title}</a></b>'
        else:
            title_link = hbold(event.title)

        place_info = "‚Äî"
        if event.venue:
            place_info = f"{event.venue.name}, {event.venue.city}" if event.venue.city else event.venue.name

        date_start_info = event.date_start.strftime("%d.%m.%Y –≤ %H:%M") if event.date_start else "‚Äî"

        price_info = "‚Äî"
        if event.price_min and event.price_max:
            price_info = f"–æ—Ç {event.price_min} –¥–æ {event.price_max} BYN"
        elif event.price_min:
            price_info = f"–æ—Ç {event.price_min} BYN"

        when_info = event.description if event.description else "‚Äî"

        event_card = (
            f"{title_link}\n\n"
            f"üìç {hbold('–ú–µ—Å—Ç–æ:')} {hitalic(place_info)}\n"
            f"üïí {hbold('–í—Ä–µ–º—è:')} {hitalic(when_info)}\n"
            f"üìÖ {hbold('–ù–∞—á–∞–ª–æ:')} {hitalic(date_start_info)}\n"
            f"üí∞ {hbold('–¶–µ–Ω–∞:')} {hitalic(price_info)}"
        )
        response_parts.append(event_card)

    separator = "\n\n" + "‚Äî" * 15 + "\n\n"
    return separator.join(response_parts)


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    async with async_session() as session:
        user = await db.get_or_create_user(session, message.from_user.id, message.from_user.username)
        user_regions = user.regions

    if not user_regions:
        await state.set_state(UserSetup.choosing_country)
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ—Ö–æ–∂–µ, —Ç—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ.\n\n"
            "–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É.",
            reply_markup=kb.get_country_selection_keyboard()
        )
    else:
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {hbold(message.from_user.first_name)}!",
            reply_markup=kb.get_main_menu_keyboard(),
            parse_mode=ParseMode.HTML
        )


@router.callback_query(UserSetup.choosing_country, F.data.startswith("select_country:"))
async def cq_select_country(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserSetup.choosing_regions)
    await state.update_data(selected_regions=[])
    all_cities = await db.get_all_cities()
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–µ–≥–∏–æ–Ω—ã, —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ.",
        reply_markup=kb.get_region_selection_keyboard(all_cities, [])
    )


@router.callback_query(UserSetup.choosing_regions, F.data.startswith("toggle_region:"))
async def cq_toggle_region(callback: CallbackQuery, state: FSMContext):
    region = callback.data.split(":")[1]
    data = await state.get_data()
    selected_regions = data.get("selected_regions", [])

    if region in selected_regions:
        selected_regions.remove(region)
    else:
        selected_regions.append(region)

    await state.update_data(selected_regions=selected_regions)
    all_cities = await db.get_all_cities()
    await callback.message.edit_reply_markup(
        reply_markup=kb.get_region_selection_keyboard(all_cities, selected_regions)
    )
    await callback.answer()


@router.callback_query(UserSetup.choosing_regions, F.data == "finish_region_selection")
async def cq_finish_region_selection(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_regions = data.get("selected_regions", [])
    if not selected_regions:
        await callback.answer("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–≥–∏–æ–Ω!", show_alert=True)
        return

    await db.update_user_regions(callback.from_user.id, selected_regions)
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞—Ñ–∏—à–µ–π.",
        reply_markup=kb.get_main_menu_keyboard()
    )


@router.message(F.text == "üóì –ê—Ñ–∏—à–∞")
async def menu_afisha(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.get_categories_keyboard())


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def menu_settings(message: Message, state: FSMContext):
    await state.set_state(UserSetup.choosing_country)
    await message.answer(
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É:",
        reply_markup=kb.get_country_selection_keyboard()
    )


@router.message(F.text == "üîé –ü–æ–∏—Å–∫")
async def menu_search(message: Message, state: FSMContext):
    await state.set_state(SearchState.waiting_for_query)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –∞—Ä—Ç–∏—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=ReplyKeyboardRemove())


async def show_subscriptions(message: Message | CallbackQuery):
    user_id = message.from_user.id

    subscriptions = await db.get_user_subscriptions(user_id)
    text = "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫. –î–æ–±–∞–≤—å –ø–µ—Ä–≤—É—é!" if not subscriptions else "–¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:"

    if isinstance(message, CallbackQuery):
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–ª–±—ç–∫, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.message.edit_text(text, reply_markup=kb.manage_subscriptions_keyboard(subscriptions))
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await message.answer(text, reply_markup=kb.manage_subscriptions_keyboard(subscriptions))


@router.message(F.text == "‚≠ê –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
async def menu_my_subscriptions(message: Message):
    await show_subscriptions(message)


@router.callback_query(F.data.startswith("unsubscribe:"))
async def cq_unsubscribe_item(callback: CallbackQuery):
    item_name = callback.data.split(":", 1)[1]
    await db.remove_subscription(callback.from_user.id, item_name)
    await callback.answer(f"‚ùå –¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç {item_name}.")
    await show_subscriptions(callback)


@router.callback_query(F.data == "add_subscription")
async def cq_add_subscription(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SubscriptionFlow.waiting_for_artist_name)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
    await callback.answer()


@router.message(SubscriptionFlow.waiting_for_artist_name)
async def process_artist_search(message: Message, state: FSMContext):
    found_artists = await db.find_artists_fuzzy(message.text)
    if not found_artists:
        await message.answer("–ü–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ '–û—Ç–º–µ–Ω–∞'.",
                             reply_markup=kb.found_artists_keyboard([]))
        return
    await message.answer("–í–æ—Ç –∫–æ–≥–æ —è –Ω–∞—à–µ–ª. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –∏–ª–∏ –Ω–∞–∂–º–∏ '–û—Ç–º–µ–Ω–∞'.",
                         reply_markup=kb.found_artists_keyboard(found_artists))


@router.callback_query(F.data.startswith("subscribe_to_artist:"))
async def cq_subscribe_to_artist(callback: CallbackQuery, state: FSMContext):
    artist_name = callback.data.split(":", 1)[1]
    await db.add_subscription(callback.from_user.id, artist_name, 'music')
    await state.clear()
    await callback.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ '{artist_name}' –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!")
    await show_subscriptions(callback)


@router.callback_query(F.data == "cancel_subscription")
async def cq_cancel_subscription(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await show_subscriptions(callback)


@router.callback_query(F.data.startswith("category:"))
async def cq_category(callback: CallbackQuery):
    category_name = callback.data.split(":")[1]
    user_regions = await db.get_user_regions(callback.from_user.id)
    if not user_regions:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!", show_alert=True)
        return
    cities = await db.get_cities_for_category(category_name, user_regions)
    if not cities:
        await callback.answer("–í –≤–∞—à–∏—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", show_alert=True)
        return
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {hbold(category_name)}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=kb.get_cities_keyboard(cities, category_name),
        parse_mode=ParseMode.HTML
    )


@router.callback_query(F.data.startswith("city:"))
async def cq_city(callback: CallbackQuery):
    _, city, category = callback.data.split(":")
    await callback.message.edit_text(f"–ó–∞–≥—Ä—É–∂–∞—é —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞ {hbold(city)}...")
    events = await db.get_grouped_events_by_city_and_category(city, category)
    response_text = await format_grouped_events_for_response(events)
    await callback.message.answer(response_text, disable_web_page_preview=True, parse_mode=ParseMode.HTML)
    await callback.answer()


@router.message(SearchState.waiting_for_query)
async def search_query_handler(message: Message, state: FSMContext):
    await state.clear()
    user_regions = await db.get_user_regions(message.from_user.id)
    await message.answer(f"–ò—â—É —Å–æ–±—ã—Ç–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É: {hitalic(message.text)}...", parse_mode=ParseMode.HTML,
                         reply_markup=kb.get_main_menu_keyboard())
    found_events = await db.find_events_fuzzy(message.text, user_regions)
    response_text = await format_events_for_response(found_events)
    await message.answer(response_text, disable_web_page_preview=True, parse_mode=ParseMode.HTML)


COUNTRY_ID_GERMANY = 1 # –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä ID

event_data_for_test = {
    "event_type": "–ö–æ–Ω—Ü–µ—Ä—Ç",      # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è event_type_obj
    "place": "–ë–µ–ª–æ—Ä—É—Å—å", # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è venue (–∏ extract_city_from_place)
    "country": COUNTRY_ID_GERMANY, # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è venue (country_id)
    "event_title": "–ö–æ—Ü–Ω–µ—Ä—Ç Imagine Dragons",    # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è artist (name)
    "timestamp": datetime(2026, 8, 30, 19, 1, 0).timestamp(), # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è date_start (timestamp), –º–æ–∂–Ω–æ None
    "time": "–ù–∞—á–∞–ª–æ –≤ 19:00",    # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è description –Ω–æ–≤–æ–≥–æ Event
    "price_min": 50,              # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è price_min –Ω–æ–≤–æ–≥–æ Event (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    "price_max": 250,             # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è price_max –Ω–æ–≤–æ–≥–æ Event (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    "link": "https://example.com/tickets/imagine_dragons_berlin" # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è EventLink (url)
}


@router.message(F.text)
async def any_text_handler(message: Message):
    await db.add_unique_event(event_data_for_test)
    print("success")
    # await message.reply("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é. –î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ 'üîé –ü–æ–∏—Å–∫'.")