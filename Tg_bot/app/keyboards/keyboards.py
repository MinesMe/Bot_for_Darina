# app/keyboards.py

from datetime import datetime
import locale
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from dateutil.relativedelta import relativedelta
from app.lexicon import EVENT_TYPE_EMOJI

# --- –ö–û–ù–°–¢–ê–ù–¢–´ ---



# --- –û–°–ù–û–í–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def get_main_menu_keyboard(lexicon) -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text=lexicon.get('main_menu_button_afisha')),
        KeyboardButton(text=lexicon.get('main_menu_button_subs'))
    )
    builder.row(
        KeyboardButton(text=lexicon.get('main_menu_button_profile')),
        KeyboardButton(text=lexicon.get('main_menu_button_favorites')),
    )
    return builder.as_markup(resize_keyboard=True)



# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –û–ù–ë–û–†–î–ò–ù–ì–ê ---





def get_home_city_selection_keyboard(top_cities: list, lexicon) -> InlineKeyboardMarkup: 
    builder = InlineKeyboardBuilder()
    for city in top_cities:
        builder.button(text=city, callback_data=f"select_home_city:{city}")
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="üîé –ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="search_for_home_city"))
    return builder.as_markup()



def get_event_type_selection_keyboard(lexicon, selected_types: list = None) -> InlineKeyboardMarkup:
    if selected_types is None: selected_types = []
    builder = InlineKeyboardBuilder()
    for event_type in lexicon.EVENT_TYPES:
        text = f"‚úÖ {event_type}" if event_type in selected_types else f"‚¨úÔ∏è {event_type}"
        builder.button(text=text, callback_data=f"toggle_event_type:{event_type}")
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text=lexicon.get('finish_button'), callback_data="finish_preferences_selection:{True}"))
    return builder.as_markup()

def get_back_to_city_selection_keyboard(lexicon) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text=lexicon.get('back_button'), callback_data="back_to_city_selection")
    return builder.as_markup()

# --- –ù–û–í–´–ï –ò –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –ü–û–î–ü–ò–°–û–ö ---





    








def get_region_selection_keyboard(
    all_countries: list, 
    selected_regions: list, 
    finish_callback: str,
    back_callback: str  # <--- –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
) -> InlineKeyboardMarkup:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç finish_callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ì–æ—Ç–æ–≤–æ' –∏ back_callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'.
    """
    builder = InlineKeyboardBuilder()
    for country in all_countries:
        text = f"‚úÖ {country}" if country in selected_regions else f"‚¨úÔ∏è {country}"
        builder.button(text=text, callback_data=f"toggle_region:{country}")
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=finish_callback))  
    
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º callback_, –≤—ã –ø—Ä–∞–≤—ã. –ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, —è —É—Å–ª–æ–∂–Ω–∏–ª –∏data
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback))
    
    return builder.as_markup()










# --- –û–°–¢–ê–õ–¨–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ ---



# def get_paginated_artists_keyboard(all_artists: list, selected_artists: set, page: int = 0) -> InlineKeyboardMarkup:
#     builder = InlineKeyboardBuilder()
#     PAGE_SIZE = 5
#     start, end = page * PAGE_SIZE, (page + 1) * PAGE_SIZE
#     artists_on_page = all_artists[start:end]
#     for artist in artists_on_page:
#         text = f"‚úÖ {artist}" if artist in selected_artists else f"‚¨úÔ∏è {artist}"
#         builder.button(text=text, callback_data=f"toggle_artist_subscribe:{artist}")
#     builder.adjust(1)
#     total_pages = (len(all_artists) + PAGE_SIZE - 1) // PAGE_SIZE
#     if total_pages > 1:
#         pagination_buttons = []
#         if page > 0:
#             pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"paginate_artists:{page - 1}"))
#         pagination_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="ignore"))
#         if page < total_pages - 1:
#             pagination_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"paginate_artists:{page + 1}"))
#         builder.row(*pagination_buttons)
#     builder.row(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish_artist_selection"))
#     return builder.as_markup()


# def get_cities_keyboard(cities: list, category: str) -> InlineKeyboardMarkup:
#     builder = InlineKeyboardBuilder()
#     for city in cities:
#         builder.button(text=city, callback_data=f"city:{city}:{category}")
#     builder.adjust(2)
#     return builder.as_markup()

#---------- –ê–§–ò–®–ê ----------

# def get_afisha_settings()-> InlineKeyboardMarkup:
#     builder = InlineKeyboardBuilder()
#     builder.row(InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data=f"afisha_main_geo_settings"))
#     builder.row(InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data=f"skip_afisha_main_geo"))
#     return builder.as_markup()

# def get_afisha_settings_type()-> InlineKeyboardMarkup:
#     builder = InlineKeyboardBuilder()
#     builder.row(InlineKeyboardButton(text="–ü–æ –º–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data=f"afisha_defautl_type_settings"))
#     builder.row(InlineKeyboardButton(text="–î—Ä—É–≥—É—é", callback_data=f"afisha_another_type_settings"))
#     return builder.as_markup()









# --- –ù–û–í–´–ô –ë–õ–û–ö: –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" ---

# def get_favorites_menu_keyboard( favorites: list, lexicon) -> InlineKeyboardMarkup:
#     """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'."""
#     builder = InlineKeyboardBuilder()
    
#     if favorites:
#         for fav in favorites:
#             # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ Telegram
#             button_text = fav.name[:40] + '...' if len(fav.name) > 40 else fav.name
#             builder.button(text=f"‚≠ê {button_text}", callback_data=f"view_favorite:{fav.artist_id}")
#         builder.adjust(1)
    
#     # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å" –ø–µ—Ä–µ–µ—Ö–∞–ª–∞ –≤ –¥—Ä—É–≥–æ–π –º–æ–¥—É–ª—å.
#     # –ö–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å" —Ç–µ–ø–µ—Ä—å –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞—Ä—Ç–∏—Å—Ç–æ–º.
    
#     return builder.as_markup()





