import asyncio
import json
from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hbold, hitalic
from aiogram.exceptions import TelegramForbiddenError

from app.database.models import listener_engine
from app.database.requests import requests_favorite_notifier as db_notifier
from app.keyboards.keyboards_notifier import get_add_to_subscriptions_keyboard
from app.lexicon import Lexicon
# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
from app.services.recommendation import get_recommended_artists

async def favorite_notification_handler(bot: Bot, connection, pid, channel, payload):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ–ª—É—á–∞–µ—Ç –í–ê–® —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    print(f"\n‚≠êÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ù–û–í–û–ú –ò–ó–ë–†–ê–ù–ù–û–ú –∏–∑ –∫–∞–Ω–∞–ª–∞ '{channel}' (PID: {pid})")
    
    try:
        data = json.loads(payload)
        user_id = data.get('user_id')
        artist_name = data.get('artist_name')

        if not user_id or not artist_name:
            print("[–û–®–ò–ë–ö–ê] –í payload –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç user_id –∏–ª–∏ artist_name.")
            return

        # 1. –ü–û–õ–£–ß–ê–ï–ú –í–ê–® –ì–û–¢–û–í–´–ô –°–ü–ò–°–û–ö –ê–†–¢–ò–°–¢–û–í
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
        artists = await get_recommended_artists(artist_name)
        
        # 2. –§–û–†–ú–ò–†–£–ï–ú –¢–ï–ö–°–¢ –°–û–û–ë–©–ï–ù–ò–Ø
        text = (
            f"–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ {hbold(artist_name)}! ‚ú®\n\n"
            f"–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º —Ç–∞–∫–∂–µ –ø–æ–Ω—Ä–∞–≤—è—Ç—Å—è —ç—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:\n"
        )
        
        # 3. –ü–†–ï–í–†–ê–©–ê–ï–ú –í–ê–® –°–ü–ò–°–û–ö –í –ö–†–ê–°–ò–í–´–ô –í–ò–î
        recommendations_list = "\n".join([f"‚Ä¢ {hitalic(rec_artist)}" for rec_artist in artists])
        text += recommendations_list

        # 4. –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï
        try:
            await bot.send_message(
                chat_id=user_id,
                text=text,
                parse_mode=ParseMode.HTML,
            )
            print(f"--> –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except TelegramForbiddenError:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    except Exception as e:
        print(f"[–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] –≤ favorite_notification_handler: {e}")

async def notification_handler(bot: Bot, connection, pid, channel, payload):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏ –∏–∑ –ë–î."""
    print(f"\n--- –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç PID {pid} –ø–æ –∫–∞–Ω–∞–ª—É {channel} ---")
    data = json.loads(payload)
    
    artist_info = data.get('artist', {})
    artist_id = artist_info.get('artist_id')
    artist_name = artist_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç')
    
    event_id = data.get('event_id')
    event_title = data.get('title', '–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ')
    
    venue_info = data.get('venue', {})
    event_city_name = venue_info.get('city_name', '')
    event_country_name = data.get('country', {}).get('name', '')
    
    if not artist_id or not event_id:
        print("–û—à–∏–±–∫–∞ –≤ payload: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç artist_id –∏–ª–∏ event_id.")
        return

    subscribers = await db_notifier.get_favorite_subscribers_by_artist(artist_id)
    print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ '{artist_name}' (ID: {artist_id}): {len(subscribers)} —á–µ–ª.")

    for fav_entry in subscribers:
        user = fav_entry.user
        user_regions = fav_entry.regions
        
        is_priority_region = False
        if user_regions and (event_country_name in user_regions or event_city_name in user_regions):
            is_priority_region = True
            
        lexicon = Lexicon(user.language_code)
        emoji = "üî•" if is_priority_region else "üîî"
        
        text = (
            f"{emoji} –£ –≤–∞—à–µ–≥–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞ {hbold(artist_name)} –ø–æ—è–≤–∏–ª–æ—Å—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ!\n\n"
            f"üéµ {hbold(event_title)}\n"
            f"üìç {event_city_name}, {event_country_name}"
        )
        
        try:
            await bot.send_message(
                chat_id=user.user_id,
                text=text,
                reply_markup=get_add_to_subscriptions_keyboard(event_id),
                parse_mode=ParseMode.HTML
            )
            print(f"--> –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}")
        except TelegramForbiddenError:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")
        
        await asyncio.sleep(0.1)


# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø ---
async def listen_for_db_notifications(bot: Bot):
    """–°–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –≤ –ë–î –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    print("üì° –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –ë–î...")
    try:
        async with listener_engine.connect() as conn:
            raw_connection = await conn.get_raw_connection()
            asyncpg_conn = raw_connection.driver_connection
            
            # 1. –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ö–ê–ù–ê–õ–ê –°–û–ë–´–¢–ò–ô (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ notification_handler)
            event_handler_with_bot = lambda c, p, ch, pl: asyncio.create_task(notification_handler(bot, c, p, ch, pl))
            await asyncpg_conn.add_listener("new_event_channel", event_handler_with_bot)
            print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª 'new_event_channel' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            
            # 2. –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ö–ê–ù–ê–õ–ê –ò–ó–ë–†–ê–ù–ù–û–ì–û (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ favorite_notification_handler)
            favorite_handler_with_bot = lambda c, p, ch, pl: asyncio.create_task(favorite_notification_handler(bot, c, p, ch, pl))
            await asyncpg_conn.add_listener("user_favorite_added_channel", favorite_handler_with_bot)
            print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª 'user_favorite_added_channel' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            
            print("\n–°–ª—É—à–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –û–∂–∏–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            while True:
                await asyncio.sleep(3600)

    except Exception as e:
        print(f"[–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] –í —Å–ª—É—à–∞—Ç–µ–ª–µ –ë–î: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º.")