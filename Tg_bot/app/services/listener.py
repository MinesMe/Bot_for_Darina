import asyncio
import json
from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hbold, hitalic
from aiogram.exceptions import TelegramForbiddenError

from app.database.models import listener_engine
from app.database.requests import requests_favorite_notifier as db_notifier
from app.database.requests.requests import get_user_lang
from app.keyboards.keyboards_notifier import get_add_to_subscriptions_keyboard
from app.lexicon import Lexicon
# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
from app.services.recommendation import get_recommended_artists
from app.handlers.subscriptions import RecommendationFlow # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π FSM
from aiogram.fsm.storage.redis import RedisStorage # –ò–ª–∏ –≤–∞—à FSM Storage
from app.keyboards import keyboards as kb

async def favorite_notification_handler(bot: Bot, storage: RedisStorage, connection, pid, channel, payload):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ–ª—É—á–∞–µ—Ç –í–ê–® —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–¥–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    print(f"\n‚≠êÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ù–û–í–û–ú –ò–ó–ë–†–ê–ù–ù–û–ú –∏–∑ –∫–∞–Ω–∞–ª–∞ '{channel}' (PID: {pid})")
    
    try:
        data = json.loads(payload)
        user_id = data.get('user_id')
        artist_name = data.get('artist_name')

        if not user_id or not artist_name:
            print("[–û–®–ò–ë–ö–ê] –í payload –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç user_id –∏–ª–∏ artist_name.")
            return

        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –û–ë–™–ï–ö–¢–û–í Artist, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π –ë–î (–∏–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω—ã)
        recommended_artists = await get_recommended_artists(artist_name)

        # –ï—Å–ª–∏ Gemini –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é/—Å–æ–∑–¥–∞–Ω–∏–µ
        if not recommended_artists:
            print(f"--> –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è '{artist_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return

        user_lang = await get_user_lang(user_id)
        lexicon = Lexicon(user_lang)
        
        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text_header = lexicon.get('recommendations_after_add_favorite').format(artist_name=hbold(artist_name.title()))
        
        # 3. –°–æ–∑–¥–∞–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –ø–æ—ç—Ç–æ–º—É selected_artist_ids - –ø—É—Å—Ç–æ–π set
        keyboard = kb.get_recommended_artists_keyboard(recommended_artists, lexicon, set())

        # 4. –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        try:
            sent_message = await bot.send_message(
                chat_id=user_id,
                text=text_header,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML,
            )
            print(f"--> –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            # 5. –ó–ê–ü–ò–°–´–í–ê–ï–ú –î–ê–ù–ù–´–ï –í FSM –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–π —à–∞–≥ –¥–ª—è —Å–≤—è–∑–∏ —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è —Å —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏
            state_data = {
                'recommended_artists': [artist.to_dict() for artist in recommended_artists], # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
                'selected_artist_ids': set(), # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—ã–±–æ—Ä –ø—É—Å—Ç
                'message_id_to_edit': sent_message.message_id # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            }
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await storage.set_state(key=f"fsm:{user_id}:{user_id}", state=RecommendationFlow.selecting_artists)
            await storage.set_data(key=f"fsm:{user_id}:{user_id}", data=state_data)
            print(f"--> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'selecting_artists' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


        except TelegramForbiddenError:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    except Exception as e:
        print(f"[–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] –≤ favorite_notification_handler: {e}", exc_info=True)

async def notification_handler(bot: Bot, connection, pid, channel, payload):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏ –∏–∑ –ë–î."""
    print(f"\n--- –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç PID {pid} –ø–æ –∫–∞–Ω–∞–ª—É {channel} ---")
    data = json.loads(payload)
    
    artist_info = data.get('artist', {})
    artist_id = artist_info.get('artist_id')
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï --- –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    artist_name_payload = artist_info.get('name') 
    
    event_id = data.get('event_id')
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï --- –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    event_title_payload = data.get('title')
    
    venue_info = data.get('venue', {})
    event_city_name = venue_info.get('city_name', '')
    event_country_name = data.get('country', {}).get('name', '')
    
    if not artist_id or not event_id:
        print("–û—à–∏–±–∫–∞ –≤ payload: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç artist_id –∏–ª–∏ event_id.")
        return

    subscribers = await db_notifier.get_favorite_subscribers_by_artist(artist_id)
    print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ '{artist_name_payload or 'ID:'+str(artist_id)}': {len(subscribers)} —á–µ–ª.")

    for fav_entry in subscribers:
        user = fav_entry.user
        user_regions = fav_entry.regions
        
        is_priority_region = False
        if user_regions and (event_country_name in user_regions or event_city_name in user_regions):
            is_priority_region = True
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï --- –°–æ–∑–¥–∞–µ–º –ª–µ–∫—Å–∏–∫–æ–Ω –¥–ª—è –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lexicon = Lexicon(user.language_code)
        emoji = "üî•" if is_priority_region else "üîî"
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï --- –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–µ–∫—Å–∏–∫–æ–Ω –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        final_artist_name = artist_name_payload or lexicon.get('unknown_artist')
        final_event_title = event_title_payload or lexicon.get('new_event_title')

        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï --- –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ –ª–µ–∫—Å–∏–∫–æ–Ω–∞
        text = lexicon.get('new_event_for_favorite_notification').format(
            emoji=emoji,
            artist_name=hbold(final_artist_name),
            event_title=hbold(final_event_title),
            event_city=event_city_name,
            event_country=event_country_name
        )

        try:
            await bot.send_message(
                chat_id=user.user_id,
                text=text,
                reply_markup=get_add_to_subscriptions_keyboard(event_id, lexicon),
                parse_mode=ParseMode.HTML
            )
            print(f"--> –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}")
        except TelegramForbiddenError:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")
        
        await asyncio.sleep(0.1)


# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø ---
async def listen_for_db_notifications(bot: Bot, storage: RedisStorage):
    """–°–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –≤ –ë–î –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    print("üì° –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –ë–î...")
    try:
        async with listener_engine.connect() as conn:
            raw_connection = await conn.get_raw_connection()
            asyncpg_conn = raw_connection.driver_connection
            
            # 1. –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ö–ê–ù–ê–õ–ê –°–û–ë–´–¢–ò–ô (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ notification_handler)
            event_handler_with_bot = lambda c, p, ch, pl: asyncio.create_task(notification_handler(bot, c, p, ch, pl))
            await asyncpg_conn.add_listener("new_event_channel", event_handler_with_bot)
            print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª 'new_event_channel' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            
            # 2. –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ö–ê–ù–ê–õ–ê –ò–ó–ë–†–ê–ù–ù–û–ì–û (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ favorite_notification_handler)
            favorite_handler_with_bot = lambda c, p, ch, pl: asyncio.create_task(favorite_notification_handler(bot, storage, c, p, ch, pl))
            await asyncpg_conn.add_listener("user_favorite_added_channel", favorite_handler_with_bot)
            print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª 'user_favorite_added_channel' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            
            print("\n–°–ª—É—à–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –û–∂–∏–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            while True:
                await asyncio.sleep(3600)

    except Exception as e:
        print(f"[–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] –í —Å–ª—É—à–∞—Ç–µ–ª–µ –ë–î: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º.")