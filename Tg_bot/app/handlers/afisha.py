# app/handlers/afisha.py

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hbold

from ..database import requests as db
from .. import keyboards as kb
from ..lexicon import Lexicon
from .common import format_grouped_events_for_response, format_events_for_response

router = Router()


class SearchState(StatesGroup):
    waiting_for_query = State()


@router.message(F.text.in_(['üóì –ê—Ñ–∏—à–∞', 'üóì Events']))
async def menu_afisha(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_prefs = await db.get_user_preferences(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏ –Ω–µ–ø—É—Å—Ç—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
    if user_prefs and user_prefs.get("preferred_event_types"):
        preferred_types = user_prefs["preferred_event_types"]
        text = "–í–æ—Ç –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –µ–≥–æ –ª—é–±–∏–º—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        markup = kb.get_categories_keyboard(categories=preferred_types)
    else:
        # –ï—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:"
        markup = kb.get_categories_keyboard()

    await message.answer(text, reply_markup=markup)


@router.message(F.text.in_(['üîé –ü–æ–∏—Å–∫', 'üîé Search']))
async def menu_search(message: Message, state: FSMContext):
    await state.set_state(SearchState.waiting_for_query)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –∞—Ä—Ç–∏—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ–∏—Å–∫ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤):")


@router.callback_query(F.data.startswith("category:"))
async def cq_category(callback: CallbackQuery):
    category_name = callback.data.split(":")[1]

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –õ–û–ì–ò–ö–ò: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–∞—à–Ω–∏–π –≥–æ—Ä–æ–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å ---
    user_prefs = await db.get_user_preferences(callback.from_user.id)

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞–Ω –¥–æ–º–∞—à–Ω–∏–π –≥–æ—Ä–æ–¥, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –Ω–µ–≥–æ
    if user_prefs and user_prefs.get("home_city"):
        city_name = user_prefs["home_city"]
        await callback.message.edit_text(
            f"–ó–∞–≥—Ä—É–∂–∞—é —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ {hbold(city_name)}...",
            parse_mode=ParseMode.HTML
        )
        events = await db.get_grouped_events_by_city_and_category(city_name, category_name)
        response_text = await format_grouped_events_for_response(events)
        await callback.message.answer(response_text, disable_web_page_preview=True, parse_mode=ParseMode.HTML)
        await callback.answer()
        return

    # –ï—Å–ª–∏ –¥–æ–º–∞—à–Ω–∏–π –≥–æ—Ä–æ–¥ –Ω–µ –∑–∞–¥–∞–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º–µ: –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥
    # –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–º –Ω—É–∂–Ω—ã —Ä–µ–≥–∏–æ–Ω—ã –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏ (—Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ 'regions')
    user_regions = await db.get_user_regions(callback.from_user.id)
    if not user_regions:
        # –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω –Ω–∏ –¥–æ–º–∞—à–Ω–∏–π –≥–æ—Ä–æ–¥, –Ω–∏ —Ä–µ–≥–∏–æ–Ω—ã –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏, –ø—Ä–æ—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!", show_alert=True)
        return

    cities = await db.get_cities_for_category(category_name, user_regions)
    if not cities:
        await callback.answer("–í –≤–∞—à–∏—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", show_alert=True)
        return

    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {hbold(category_name)}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=kb.get_cities_keyboard(cities, category_name), parse_mode=ParseMode.HTML
    )


@router.callback_query(F.data.startswith("city:"))
async def cq_city(callback: CallbackQuery):
    _, city, category = callback.data.split(":")
    await callback.message.edit_text(
        f"–ó–∞–≥—Ä—É–∂–∞—é —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞ {hbold(city)}...",
        parse_mode=ParseMode.HTML
    )
    events = await db.get_grouped_events_by_city_and_category(city, category)
    response_text = await format_grouped_events_for_response(events)
    await callback.message.answer(response_text, disable_web_page_preview=True, parse_mode=ParseMode.HTML)
    await callback.answer()


@router.message(SearchState.waiting_for_query, F.text)
async def search_query_handler(message: Message, state: FSMContext):
    await state.clear()
    # –î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥–∏–æ–Ω—ã –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏, –∞ –Ω–µ –¥–æ–º–∞—à–Ω–∏–π –≥–æ—Ä–æ–¥, —Ç.–∫. –ø–æ–∏—Å–∫ - —ç—Ç–æ —Ä–∞–∑–≤–µ–¥–∫–∞
    user_regions = await db.get_user_regions(message.from_user.id)
    lexicon = Lexicon(message.from_user.language_code)

    await message.answer(
        f"–ò—â—É —Å–æ–±—ã—Ç–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É: {hbold(message.text)}...",
        parse_mode=ParseMode.HTML,
        reply_markup=kb.get_main_menu_keyboard(lexicon)
    )

    found_events = await db.find_events_fuzzy(message.text, user_regions)
    response_text = await format_events_for_response(found_events)
    await message.answer(response_text, disable_web_page_preview=True, parse_mode=ParseMode.HTML)