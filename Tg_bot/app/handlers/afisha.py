# app/handlers/afisha.py

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hbold
from aiogram.filters.state import StateFilter

from ..database import requests as db
from .. import keyboards as kb
from ..lexicon import Lexicon
from .common import format_grouped_events_for_response, format_events_for_response
from app.handlers.onboarding import city_search, toggle_event_type, search_for_city

router = Router()

class Afisha(StatesGroup):
    main_geo_setting = State()
    waiting_for_city_search = State()
    choosing_home_city = State()

class SearchState(StatesGroup):
    waiting_for_query = State()
    


@router.message(F.text.in_(['üóì –ê—Ñ–∏—à–∞', 'üóì Events']))
async def menu_afisha(message: Message, state: FSMContext):
    is_main_geo = await db.check_main_geo_status(message.from_user.id)
    if is_main_geo == False:
        await state.update_data(is_settings_complete=False)
        await message.answer("–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏—Ö —Å–µ–π—á–∞—Å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å. –ù–æ –¥–ª—è –∞—Ñ–∏—à–∏ –Ω–∞–¥–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∏–≤–µ–Ω—Ç–∞ –∏ –≥–æ—Ä–æ–¥",
                             reply_markup=kb.get_afisha_settings())
    else:
        await state.update_data(is_settings_complete=True)
        await message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ñ–∏—à–∏ –ø–æ –≤–∞—à–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ",
                             reply_markup=kb.get_afisha_settings_type())
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # user_prefs = await db.get_user_preferences(message.from_user.id)

        # # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏ –Ω–µ–ø—É—Å—Ç—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
        # if user_prefs and user_prefs.get("preferred_event_types"):
        #     preferred_types = user_prefs["preferred_event_types"]
        #     text = "–í–æ—Ç –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
        #     # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –µ–≥–æ –ª—é–±–∏–º—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        #     markup = kb.get_categories_keyboard(categories=preferred_types)
        # else:
        #     # –ï—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä
        #     text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:"
        #     markup = kb.get_categories_keyboard()

        # await message.answer(text, reply_markup=markup)


@router.callback_query(F.data.startswith("afisha_main_geo_settings") | F.data.startswith("skip_afisha_main_geo") | F.data.startswith("afisha_another_type_settings"))
async def main_geo_setting_country(callback: CallbackQuery, state:FSMContext):
    await state.set_state(Afisha.main_geo_setting)
    cq_data = callback.data
    if cq_data == "skip_afisha_main_geo":
        await state.update_data(is_settings_skipped=True)
    else:
        await state.update_data(is_settings_skipped=False)
    user_data = await db.get_user_preferences(callback.from_user.id)
    user_country = user_data['home_country']
    await state.update_data(home_country=user_country)
    lexicon = Lexicon(callback.from_user.language_code)
    top_cities = await db.get_top_cities_for_country(user_country)

    # –î–µ–π—Å—Ç–≤–∏–µ: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–µ–ª CallbackQuery
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–µ—Ç–µ –≥–æ—Ä–æ–¥",
        reply_markup=kb.get_home_city_selection_keyboard(top_cities, lexicon),
        parse_mode=ParseMode.HTML
    )

    # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ CallbackQuery, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–Ω–∞—á–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.answer()

@router.callback_query(Afisha.main_geo_setting, F.data == "search_for_home_city")
async def cq_search_for_city(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Afisha.waiting_for_city_search)
    await search_for_city(callback, state, "Afisha")

@router.message(Afisha.waiting_for_city_search, F.text)
async def process_city_search(message: Message, state: FSMContext):
    user_data = await db.get_user_preferences(message.from_user.id)
    user_country = user_data['home_country']
    await state.set_state(Afisha.choosing_home_city)

    await city_search(message, state, "Afisha", user_country)

@router.callback_query(Afisha.choosing_home_city, F.data == "back_to_city_selection")
async def main_geo_setting_country(callback: CallbackQuery, state:FSMContext):
    await state.set_state(Afisha.choosing_home_city)
    user_data = await db.get_user_preferences(callback.from_user.id)
    user_country = user_data['home_country']
    lexicon = Lexicon(callback.from_user.language_code)
    top_cities = await db.get_top_cities_for_country(user_country)

    # –î–µ–π—Å—Ç–≤–∏–µ: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–µ–ª CallbackQuery
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–µ—Ç–µ –≥–æ—Ä–æ–¥",
        reply_markup=kb.get_home_city_selection_keyboard(top_cities, lexicon),
        parse_mode=ParseMode.HTML
    )

    # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ CallbackQuery, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–Ω–∞—á–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.answer()

@router.callback_query(StateFilter(Afisha.main_geo_setting, Afisha.choosing_home_city), F.data.startswith("select_home_city:"))
async def select_home_city(callback: CallbackQuery, state: FSMContext):
    city_name = callback.data.split(":")[1]
    await state.update_data(home_city=city_name)
    lexicon = Lexicon(callback.from_user.language_code)
    await state.set_state(Afisha.main_geo_setting)
    await state.update_data(selected_event_types=[])
    await callback.message.edit_text(
        f"–û—Ç–ª–∏—á–Ω–æ, —Ç–≤–æ–π –≥–æ—Ä–æ–¥: {hbold(city_name)}. "
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –¥–∞–≤–∞—Ç—å –ª—É—á—à–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
        reply_markup=kb.get_event_type_selection_keyboard(lexicon),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@router.callback_query(Afisha.main_geo_setting, F.data.startswith("toggle_event_type:"))
async def cq_set_event_type(callback: CallbackQuery, state: FSMContext):
    await toggle_event_type(callback, state)


@router.callback_query(F.data.startswith("afisha_defautl_type_settings"))
async def cq_set_event_type(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ê—Ñ–∏—à–∞:")
    await callback.answer()

@router.callback_query(Afisha.main_geo_setting, F.data.startswith("finish_preferences_selection:"))
async def cq_finish_preferences_selection(callback: CallbackQuery, state: FSMContext):
    is_setting_complete = callback.data.split(":")[1]
    data = await state.get_data()
    print(data)
    event_types=data.get("selected_event_types", [])
    if is_setting_complete != "False" and (event_types == []):
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–≤–µ–Ω—Ç")
        await callback.answer()
    else:
        if data["is_settings_complete"] == True or data["is_settings_skipped"] == True: 
            await callback.message.edit_text(f"–ê—Ñ–∏—à–∞ –ø–æ –≤–∞—à–∏–º –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º:")
        elif data["is_settings_skipped"] == False:
            await callback.message.edit_text(f"–°–ø–∞—Å–∏–±–æ —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏! –í–æ—Ç –ê—Ñ–∏—à–∞ –ø–æ –≤–∞—à–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º:")
            await db.update_user_preferences(
                user_id=callback.from_user.id,
                home_country=data.get("home_country"),
                home_city=data.get("home_city"),
                event_types=data.get("selected_event_types", []),
                main_geo_completed=is_setting_complete != "False"
            )

        await callback.answer()
@router.message(F.text.in_(['üîé –ü–æ–∏—Å–∫', 'üîé Search']))
async def menu_search(message: Message, state: FSMContext):
    await state.set_state(SearchState.waiting_for_query)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –∞—Ä—Ç–∏—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ–∏—Å–∫ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤):")


@router.callback_query(F.data.startswith("category:"))
async def cq_category(callback: CallbackQuery):
    category_name = callback.data.split(":")[1]

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –õ–û–ì–ò–ö–ò: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–∞—à–Ω–∏–π –≥–æ—Ä–æ–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å ---
    user_prefs = await db.get_user_preferences(callback.from_user.id)

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞–Ω –¥–æ–º–∞—à–Ω–∏–π –≥–æ—Ä–æ–¥, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –Ω–µ–≥–æ
    if user_prefs and user_prefs.get("home_city"):
        city_name = user_prefs["home_city"]
        await callback.message.edit_text(
            f"–ó–∞–≥—Ä—É–∂–∞—é —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ {hbold(city_name)}...",
            parse_mode=ParseMode.HTML
        )
        events = await db.get_grouped_events_by_city_and_category(city_name, category_name)
        response_text = await format_grouped_events_for_response(events)
        await callback.message.answer(response_text, disable_web_page_preview=True, parse_mode=ParseMode.HTML)
        await callback.answer()
        return

    # –ï—Å–ª–∏ –¥–æ–º–∞—à–Ω–∏–π –≥–æ—Ä–æ–¥ –Ω–µ –∑–∞–¥–∞–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º–µ: –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥
    # –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–º –Ω—É–∂–Ω—ã —Ä–µ–≥–∏–æ–Ω—ã –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏ (—Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ 'regions')
    user_regions = await db.get_user_regions(callback.from_user.id)
    if not user_regions:
        # –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω –Ω–∏ –¥–æ–º–∞—à–Ω–∏–π –≥–æ—Ä–æ–¥, –Ω–∏ —Ä–µ–≥–∏–æ–Ω—ã –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏, –ø—Ä–æ—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!", show_alert=True)
        return

    cities = await db.get_cities_for_category(category_name, user_regions)
    if not cities:
        await callback.answer("–í –≤–∞—à–∏—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", show_alert=True)
        return

    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {hbold(category_name)}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=kb.get_cities_keyboard(cities, category_name), parse_mode=ParseMode.HTML
    )


@router.callback_query(F.data.startswith("city:"))
async def cq_city(callback: CallbackQuery):
    _, city, category = callback.data.split(":")
    await callback.message.edit_text(
        f"–ó–∞–≥—Ä—É–∂–∞—é —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞ {hbold(city)}...",
        parse_mode=ParseMode.HTML
    )
    events = await db.get_grouped_events_by_city_and_category(city, category)
    response_text = await format_grouped_events_for_response(events)
    await callback.message.answer(response_text, disable_web_page_preview=True, parse_mode=ParseMode.HTML)
    await callback.answer()


@router.message(SearchState.waiting_for_query, F.text)
async def search_query_handler(message: Message, state: FSMContext):
    await state.clear()
    # –î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥–∏–æ–Ω—ã –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏, –∞ –Ω–µ –¥–æ–º–∞—à–Ω–∏–π –≥–æ—Ä–æ–¥, —Ç.–∫. –ø–æ–∏—Å–∫ - —ç—Ç–æ —Ä–∞–∑–≤–µ–¥–∫–∞
    user_regions = await db.get_user_regions(message.from_user.id)
    lexicon = Lexicon(message.from_user.language_code)

    await message.answer(
        f"–ò—â—É —Å–æ–±—ã—Ç–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É: {hbold(message.text)}...",
        parse_mode=ParseMode.HTML,
        reply_markup=kb.get_main_menu_keyboard(lexicon)
    )

    found_events = await db.find_events_fuzzy(message.text, user_regions)
    response_text = await format_events_for_response(found_events)
    await message.answer(response_text, disable_web_page_preview=True, parse_mode=ParseMode.HTML)