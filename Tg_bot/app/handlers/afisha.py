# app/handlers/afisha.py

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hbold

from ..database import requests as db
from .. import keyboards as kb
from ..lexicon import Lexicon
from .common import format_grouped_events_for_response, format_events_for_response
from app.handlers.onboarding import city_search as onboarding_city_search, \
                                    toggle_event_type as onboarding_toggle_event_type, \
                                    search_for_city as onboarding_search_for_city

router = Router()

class AfishaFSM(StatesGroup): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    choosing_city = State()           # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ (–∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞)
    waiting_city_input = State()    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞
    choosing_event_types = State()    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π (–±—ã–≤—à–∏–π main_geo_setting)

class SearchGlobalFSM(StatesGroup): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    waiting_for_query = State()
    

@router.message(F.text.in_(['üóì –ê—Ñ–∏—à–∞', 'üóì Events', 'üóì –ê—Ñ—ñ—à–∞']))
async def menu_afisha(message: Message, state: FSMContext):
    await state.clear() 
    is_main_geo = await db.check_main_geo_status(message.from_user.id)
    lexicon = Lexicon(message.from_user.language_code) 

    if not is_main_geo: 
        await state.update_data(is_settings_complete=False) 
        await message.answer(
            lexicon.get('afisha_prompt_no_main_settings_v2'),
            reply_markup=kb.get_afisha_settings() 
        )
    else:
        await state.update_data(is_settings_complete=True) 
        await message.answer(
            lexicon.get('afisha_prompt_with_main_settings_v2'), 
            reply_markup=kb.get_afisha_settings_type() 
        )

@router.callback_query(
    F.data.in_([
        "afisha_main_geo_settings", # –û—Ç kb.get_afisha_settings() -> "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å"
        "skip_afisha_main_geo",     # –û—Ç kb.get_afisha_settings() -> "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"
        "afisha_another_type_settings" # –û—Ç kb.get_afisha_settings_type() -> "–î—Ä—É–≥—É—é"
    ]) 
    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ø –∏–∑–º–µ–Ω–∏–ª F.data.startswith –Ω–∞ F.data.in_ –¥–ª—è —Ç–µ—Ö callback_data,
    # –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å–∞. –ï—Å–ª–∏ —É –≤–∞—Å –æ–Ω–∏ –∏–º–µ—é—Ç —Å—É—Ñ—Ñ–∏–∫—Å, –≤–µ—Ä–Ω–∏—Ç–µ startswith.
    # –í –≤–∞—à–µ–º keyboards.py –¥–ª—è —ç—Ç–∏—Ö –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤.
)
async def afisha_start_fsm_setup(callback: CallbackQuery, state:FSMContext): 
    # await state.set_state(Afisha.main_geo_setting) # –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ï –ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ó–î–ï–°–¨
    cq_data = callback.data
    user_id = callback.from_user.id
    lexicon = Lexicon(callback.from_user.language_code)
    
    current_fsm_data = await state.get_data() 
    is_initial_setup_path = not current_fsm_data.get("is_settings_complete", True)

    if cq_data == "skip_afisha_main_geo":
        await state.update_data(is_settings_skipped_via_afisha=True) 
        await state.update_data(save_final_settings_as_main=False) 
    elif cq_data == "afisha_main_geo_settings" and is_initial_setup_path: # –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —á–µ—Ä–µ–∑ –∞—Ñ–∏—à—É
        await state.update_data(is_settings_skipped_via_afisha=False)
        await state.update_data(save_final_settings_as_main=True) 
    else: # –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (afisha_another_type_settings –ò–õ–ò afisha_main_geo_settings –∫–æ–≥–¥–∞ is_settings_complete=True)
        await state.update_data(is_settings_skipped_via_afisha=True) 
        await state.update_data(save_final_settings_as_main=False) 

    user_prefs = await db.get_user_preferences(user_id)
    user_country = user_prefs.get('home_country') if user_prefs else None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º save_final_settings_as_main –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–æ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    data_after_flag_set = await state.get_data()
    if data_after_flag_set.get("save_final_settings_as_main") and not user_country:
        await callback.message.edit_text(lexicon.get("afisha_error_country_needed_for_main_setup_v2"))
        await state.clear()
        await callback.answer()
        return
    
    if not user_country:
        await callback.message.edit_text(lexicon.get("afisha_error_country_not_set_v2"))
        await state.clear()
        await callback.answer()
        return

    await state.update_data(current_afisha_country=user_country) 
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    await state.set_state(AfishaFSM.choosing_city) # –ò–°–ü–†–ê–í–õ–ï–ù–û
    
    top_cities = await db.get_top_cities_for_country(user_country)
    try:
        await callback.message.edit_text(
            lexicon.get("afisha_select_city_prompt_v2").format(country_name=user_country),
            reply_markup=kb.get_home_city_selection_keyboard(top_cities, lexicon),
            parse_mode=ParseMode.HTML
        )
    except Exception: 
        await callback.message.answer(
             lexicon.get("afisha_select_city_prompt_v2").format(country_name=user_country),
            reply_markup=kb.get_home_city_selection_keyboard(top_cities, lexicon),
            parse_mode=ParseMode.HTML
        )
    await callback.answer()

# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –æ–∂–∏–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ AfishaFSM.choosing_city
@router.callback_query(AfishaFSM.choosing_city, F.data == "search_for_home_city") # –ò–°–ü–†–ê–í–õ–ï–ù–û —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def afisha_fsm_ask_city_input(callback: CallbackQuery, state: FSMContext): 
    await state.set_state(AfishaFSM.waiting_city_input) # –ò–°–ü–†–ê–í–õ–ï–ù–û —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ onboarding_search_for_city –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å state –∏ callback
    await onboarding_search_for_city(callback, state, "Afisha_FSM_Search") 

@router.message(AfishaFSM.waiting_city_input, F.text) # –ò–°–ü–†–ê–í–õ–ï–ù–û —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def afisha_fsm_process_city_input(message: Message, state: FSMContext): 
    data = await state.get_data() 
    user_country = data.get('current_afisha_country') 
    lexicon = Lexicon(message.from_user.language_code)

    if not user_country:
        await message.reply(lexicon.get("error_state_lost_country_v2"))
        await state.clear()
        return
    
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ onboarding_city_search –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å state –∏ message
    # –∏ –Ω–µ –º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–≤–æ–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑ onboarding.Onboarding FSM
    await onboarding_city_search(message, state, "Afisha_FSM_Search", user_country)
    await state.set_state(AfishaFSM.choosing_city) # –ò–°–ü–†–ê–í–õ–ï–ù–û —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É

@router.callback_query(AfishaFSM.choosing_city, F.data == "back_to_city_selection") # –ò–°–ü–†–ê–í–õ–ï–ù–û —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def afisha_fsm_back_to_city_list(callback: CallbackQuery, state:FSMContext): 
    data = await state.get_data() 
    user_country = data.get('current_afisha_country')
    lexicon = Lexicon(callback.from_user.language_code)

    if not user_country:
        await callback.message.edit_text(lexicon.get("error_state_lost_country_v2"))
        await state.clear()
        await callback.answer()
        return

    top_cities = await db.get_top_cities_for_country(user_country)
    await callback.message.edit_text(
        lexicon.get("afisha_select_city_prompt_v2").format(country_name=user_country),
        reply_markup=kb.get_home_city_selection_keyboard(top_cities, lexicon),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –¢–ï–ü–ï–†–¨ –ü–†–ê–í–ò–õ–¨–ù–û –æ–∂–∏–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ AfishaFSM.choosing_city
@router.callback_query(AfishaFSM.choosing_city, F.data.startswith("select_home_city:")) # –ò–°–ü–†–ê–í–õ–ï–ù–û —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def afisha_fsm_city_selected_ask_types(callback: CallbackQuery, state: FSMContext): 
    city_name = callback.data.split(":")[1]
    await state.update_data(current_afisha_city=city_name) 
    lexicon = Lexicon(callback.from_user.language_code)
    
    await state.set_state(AfishaFSM.choosing_event_types) # –ò–°–ü–†–ê–í–õ–ï–ù–û —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–±—ã–≤—à–∏–π main_geo_setting)
    await state.update_data(current_afisha_event_types=[]) 
    
    await callback.message.edit_text(
        lexicon.get("afisha_city_selected_ask_types_v2").format(city_name=hbold(city_name)),
        reply_markup=kb.get_event_type_selection_keyboard(lexicon, []), 
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –æ–∂–∏–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ AfishaFSM.choosing_event_types
@router.callback_query(AfishaFSM.choosing_event_types, F.data.startswith("toggle_event_type:")) # –ò–°–ü–†–ê–í–õ–ï–ù–û —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def afisha_fsm_toggle_type(callback: CallbackQuery, state: FSMContext): 
    event_type_toggled = callback.data.split(":")[1]
    data = await state.get_data() 
    current_selection = data.get("current_afisha_event_types", [])
    if event_type_toggled in current_selection:
        current_selection.remove(event_type_toggled)
    else:
        current_selection.append(event_type_toggled)
    await state.update_data(current_afisha_event_types=current_selection)
    
    lexicon = Lexicon(callback.from_user.language_code)
    await callback.message.edit_reply_markup(
        reply_markup=kb.get_event_type_selection_keyboard(lexicon, current_selection)
    )
    await callback.answer()

@router.callback_query(F.data == "afisha_defautl_type_settings") 
async def afisha_display_by_saved_prefs(callback: CallbackQuery, state: FSMContext): 
    # ... (–∫–æ–¥ —ç—Ç–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç AfishaFSM) ...
    await state.clear() 
    user_id = callback.from_user.id
    lexicon = Lexicon(callback.from_user.language_code)
    user_prefs = await db.get_user_preferences(user_id)

    if not user_prefs or not user_prefs.get("home_city") or not user_prefs.get("preferred_event_types"):
        await callback.message.edit_text(
             lexicon.get("afisha_error_incomplete_main_settings_v2")
        )
        await callback.answer()
        return

    city_name = user_prefs["home_city"]
    preferred_event_types = user_prefs["preferred_event_types"]

    if not preferred_event_types: 
        await callback.message.edit_text(lexicon.get("afisha_error_no_types_in_main_settings_for_city_v2").format(city_name=city_name))
        await callback.answer()
        return

    header_text = lexicon.get('afisha_header_by_main_settings_v2').format(city_name=hbold(city_name))
    try:
        await callback.message.edit_text(header_text, parse_mode=ParseMode.HTML)
    except Exception: 
        await callback.message.answer(header_text, parse_mode=ParseMode.HTML)
    
    await callback.answer() 

    for event_type_name in preferred_event_types:
        await callback.message.answer(
            lexicon.get('afisha_loading_category_city_v2').format(category_name=event_type_name, city_name=hbold(city_name)),
            parse_mode=ParseMode.HTML
        )
        events = await db.get_grouped_events_by_city_and_category(city_name, event_type_name)
        response_text = await format_grouped_events_for_response(events)
        
        if not events:
            await callback.message.answer(lexicon.get('afisha_no_events_for_category_city_v2').format(city_name=hbold(city_name), category_name=event_type_name), parse_mode=ParseMode.HTML)
        else:
            await callback.message.answer(response_text, disable_web_page_preview=True, parse_mode=ParseMode.HTML)


# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –æ–∂–∏–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ AfishaFSM.choosing_event_types
@router.callback_query(AfishaFSM.choosing_event_types, F.data.startswith("finish_preferences_selection:")) # –ò–°–ü–†–ê–í–õ–ï–ù–û —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def afisha_fsm_finish_and_display_events(callback: CallbackQuery, state: FSMContext): 
    # ... (–∫–æ–¥ —ç—Ç–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —á–∞—Å—Ç–∏ –ª–æ–≥–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è,
    # —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –ø–æ–ª–∞–≥–∞–ª—Å—è –Ω–∞ —Ñ–ª–∞–≥ save_final_settings_as_main) ...
    is_confirmed_done = callback.data.split(":")[1] != "False" 
    
    data = await state.get_data() 
    lexicon = Lexicon(callback.from_user.language_code)
    
    city_name = data.get("current_afisha_city")
    selected_event_types = data.get("current_afisha_event_types", [])
    should_save_preferences = data.get("save_final_settings_as_main", False) 
    country_name_for_saving = data.get("current_afisha_country")

    if is_confirmed_done and not selected_event_types:
        await callback.answer(lexicon.get('afisha_alert_no_types_selected_v2'), show_alert=True)
        return 
    
    if not city_name:
        await callback.answer(lexicon.get('afisha_alert_no_city_selected_critical_v2'), show_alert=True)
        await state.clear()
        return

    header_text_after_setup = ""
    if should_save_preferences:
        if not country_name_for_saving:
            await callback.message.edit_text(lexicon.get('afisha_error_main_save_no_country_critical_v2'))
            await state.clear()
            await callback.answer()
            return
        
        header_text_after_setup = lexicon.get('afisha_header_main_settings_saved_v2').format(city_name=hbold(city_name))
        await db.update_user_preferences(
            user_id=callback.from_user.id,
            home_country=country_name_for_saving,
            home_city=city_name,
            event_types=selected_event_types,
            main_geo_completed=True 
        )
    else: 
        header_text_after_setup = lexicon.get('afisha_header_temp_choice_v2').format(city_name=hbold(city_name))

    try:
        await callback.message.edit_text(header_text_after_setup, parse_mode=ParseMode.HTML)
    except Exception: 
        await callback.message.answer(header_text_after_setup, parse_mode=ParseMode.HTML)

    await state.clear() 
    await callback.answer() 

    if selected_event_types: 
        for event_type_name in selected_event_types:
            await callback.message.answer(
                lexicon.get('afisha_loading_category_city_v2').format(category_name=event_type_name, city_name=hbold(city_name)),
                parse_mode=ParseMode.HTML
            )
            events = await db.get_grouped_events_by_city_and_category(city_name, event_type_name)
            response_text = await format_grouped_events_for_response(events)
            
            if not events:
                await callback.message.answer(lexicon.get('afisha_no_events_for_category_city_v2').format(city_name=hbold(city_name), category_name=event_type_name), parse_mode=ParseMode.HTML)
            else:
                await callback.message.answer(response_text, disable_web_page_preview=True, parse_mode=ParseMode.HTML)
    elif not is_confirmed_done: 
        await callback.message.answer(lexicon.get('afisha_no_types_info_v2'))


@router.message(F.text.in_(['üîé –ü–æ–∏—Å–∫', 'üîé Search', 'üîé –ü–æ—à—É–∫'])) 
async def menu_search(message: Message, state: FSMContext): 
    await state.clear()
    await state.set_state(SearchGlobalFSM.waiting_for_query) # –ò–°–ü–†–ê–í–õ–ï–ù–û —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    lexicon = Lexicon(message.from_user.language_code)
    await message.answer(lexicon.get('search_prompt_enter_query_v2'))


@router.message(SearchGlobalFSM.waiting_for_query, F.text) # –ò–°–ü–†–ê–í–õ–ï–ù–û —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def search_query_handler(message: Message, state: FSMContext): 
    # ... (–∫–æ–¥ —ç—Ç–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —á–∞—Å—Ç–∏ –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è) ...
    await state.clear()
    user_id = message.from_user.id
    lexicon = Lexicon(message.from_user.language_code)
    
    user_prefs = await db.get_user_preferences(user_id)
    search_regions = None
    if user_prefs and user_prefs.get("home_country") and user_prefs.get("home_city"):
        search_regions = [user_prefs["home_country"], user_prefs["home_city"]]

    await message.answer(
        lexicon.get('search_searching_for_query_v2').format(query_text=hbold(message.text)),
        parse_mode=ParseMode.HTML
    )

    found_events = await db.find_events_fuzzy(message.text, search_regions)
    response_text = await format_events_for_response(found_events) 
    
    if not found_events:
        await message.answer(lexicon.get('search_no_results_found_v2').format(query_text=hbold(message.text)))
    else:
        await message.answer(response_text, disable_web_page_preview=True, parse_mode=ParseMode.HTML)