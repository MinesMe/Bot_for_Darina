# app/keyboards.py

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from .database.models import MobilityTemplate

# --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
EVENT_TYPES_RU = ["–ö–æ–Ω—Ü–µ—Ä—Ç", "–¢–µ–∞—Ç—Ä", "–°–ø–æ—Ä—Ç", "–¶–∏—Ä–∫", "–í—ã—Å—Ç–∞–≤–∫–∞", "–§–µ—Å—Ç–∏–≤–∞–ª—å"]
EVENT_TYPE_EMOJI = {
    "–ö–æ–Ω—Ü–µ—Ä—Ç": "üéµ", "–¢–µ–∞—Ç—Ä": "üé≠", "–°–ø–æ—Ä—Ç": "üèÖ", "–¶–∏—Ä–∫": "üé™",
    "–í—ã—Å—Ç–∞–≤–∫–∞": "üé®", "–§–µ—Å—Ç–∏–≤–∞–ª—å": "üéâ",
}

# --- –û–°–ù–û–í–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def get_main_menu_keyboard(lexicon) -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text=lexicon.get('main_menu_button_afisha')),
        KeyboardButton(text=lexicon.get('main_menu_button_subs'))
    )
    builder.row(
        KeyboardButton(text=lexicon.get('main_menu_button_profile')),
        KeyboardButton(text=lexicon.get('main_menu_button_search'))
    )
    return builder.as_markup(resize_keyboard=True)

def get_profile_keyboard(lexicon) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text=lexicon.get('profile_button_location'), callback_data="change_location")
    builder.button(text=lexicon.get('profile_button_subs'), callback_data="open_subscriptions")
    builder.adjust(1)
    return builder.as_markup()

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –û–ù–ë–û–†–î–ò–ù–ì–ê ---
def get_country_selection_keyboard(countries: list, lexicon) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for country in countries:
        builder.button(text=country, callback_data=f"main_geo_settings:{country}")
    builder.adjust(2)
    return builder.as_markup()

def get_main_geo_settings(lexicon)-> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data=f"select_home_country"))
    builder.row(InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data=f"finish_preferences_selection:{False}"))
    return builder.as_markup()

def get_home_city_selection_keyboard(top_cities: list, lexicon) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for city in top_cities:
        builder.button(text=city, callback_data=f"select_home_city:{city}")
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="üîé –ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="search_for_home_city"))
    return builder.as_markup()

def get_found_home_cities_keyboard(found_cities: list, lexicon) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for city in found_cities:
        builder.button(text=city, callback_data=f"select_home_city:{city}")
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text=lexicon.get('back_button'), callback_data="back_to_city_selection"))
    return builder.as_markup()


def get_event_type_selection_keyboard(lexicon, selected_types: list = None) -> InlineKeyboardMarkup:
    if selected_types is None: selected_types = []
    builder = InlineKeyboardBuilder()
    for event_type in EVENT_TYPES_RU:
        text = f"‚úÖ {event_type}" if event_type in selected_types else f"‚¨úÔ∏è {event_type}"
        builder.button(text=text, callback_data=f"toggle_event_type:{event_type}")
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text=lexicon.get('finish_button'), callback_data="finish_preferences_selection:{True}"))
    return builder.as_markup()

def get_back_to_city_selection_keyboard(lexicon) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text=lexicon.get('back_button'), callback_data="back_to_city_selection")
    return builder.as_markup()

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –ú–û–ë–ò–õ–¨–ù–û–°–¢–ò –ò –ü–û–î–ü–ò–°–û–ö ---
def get_mobility_onboarding_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üëç –î–∞, –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="start_mobility_setup")
    builder.button(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_mobility_setup")
    return builder.as_markup()

def get_region_selection_keyboard(all_countries: list, selected_regions: list, for_template: bool = False) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for country in all_countries:
        text = f"‚úÖ {country}" if country in selected_regions else f"‚¨úÔ∏è {country}"
        callback_data = f"toggle_region:{country}"
        builder.button(text=text, callback_data=callback_data)
    builder.adjust(2)
    finish_callback = "finish_template_creation" if for_template else "finish_custom_region_selection"
    builder.row(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=finish_callback))
    return builder.as_markup()

def get_mobility_choice_keyboard(templates: list[MobilityTemplate]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if templates:
        builder.button(text="üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="choose_template")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–≥–∏–æ–Ω—ã –≤—Ä—É—á–Ω—É—é", callback_data="setup_custom_regions")
    builder.adjust(1)
    return builder.as_markup()

def get_template_selection_keyboard(templates: list[MobilityTemplate]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for template in templates:
        builder.button(text=f"üìÑ {template.template_name}", callback_data=f"select_template:{template.template_id}")
    builder.adjust(1)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_mobility_choice"))
    return builder.as_markup()

def manage_subscriptions_keyboard(items: list) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if items:
        for item in items:
            builder.button(text=f"‚ùå {item}", callback_data=f"unsubscribe:{item}")
        builder.adjust(1)
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="add_subscription_manual"),
        InlineKeyboardButton(text="üì• –ò–º–ø–æ—Ä—Ç –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞", callback_data="import_playlist")
    )
    builder.row(InlineKeyboardButton(text="üó∫Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏", callback_data="manage_mobility_templates"))
    return builder.as_markup()

# --- –ù–û–í–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –®–ê–ë–õ–û–ù–ê–ú–ò ---
def get_templates_management_keyboard(templates: list[MobilityTemplate]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if templates:
        builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data="delete_template_start")
    builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω", callback_data="create_template_start")
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º", callback_data="back_to_subscriptions"))
    return builder.as_markup()

def get_template_deletion_keyboard(templates: list[MobilityTemplate]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for template in templates:
        builder.button(text=f"‚ùå {template.template_name}", callback_data=f"delete_template_confirm:{template.template_id}")
    builder.adjust(1)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_mobility_templates"))
    return builder.as_markup()

# --- –û–°–¢–ê–õ–¨–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def found_artists_keyboard(artists: list) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for artist in artists:
        builder.button(text=f"‚úÖ {artist}", callback_data=f"subscribe_to_artist:{artist}")
    builder.adjust(1)
    builder.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_subscription"))
    return builder.as_markup()

def get_paginated_artists_keyboard(all_artists: list, selected_artists: set, page: int = 0) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    PAGE_SIZE = 5
    start, end = page * PAGE_SIZE, (page + 1) * PAGE_SIZE
    artists_on_page = all_artists[start:end]
    for artist in artists_on_page:
        text = f"‚úÖ {artist}" if artist in selected_artists else f"‚¨úÔ∏è {artist}"
        builder.button(text=text, callback_data=f"toggle_artist_subscribe:{artist}")
    builder.adjust(1)
    total_pages = (len(all_artists) + PAGE_SIZE - 1) // PAGE_SIZE
    if total_pages > 1:
        pagination_buttons = []
        if page > 0:
            pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"paginate_artists:{page - 1}"))
        pagination_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="ignore"))
        if page < total_pages - 1:
            pagination_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"paginate_artists:{page + 1}"))
        builder.row(*pagination_buttons)
    builder.row(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish_artist_selection"))
    return builder.as_markup()

def get_categories_keyboard(categories: list = None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    source_list = categories if categories else EVENT_TYPES_RU
    for category in source_list:
        emoji = EVENT_TYPE_EMOJI.get(category, "üîπ")
        builder.button(text=f"{emoji} {category}", callback_data=f"category:{category}")
    builder.adjust(2)
    return builder.as_markup()

def get_cities_keyboard(cities: list, category: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for city in cities:
        builder.button(text=city, callback_data=f"city:{city}:{category}")
    builder.adjust(2)
    return builder.as_markup()

#---------- –ê–§–ò–®–ê ----------

def get_afisha_settings()-> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data=f"afisha_main_geo_settings"))
    builder.row(InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data=f"skip_afisha_main_geo"))
    return builder.as_markup()

def get_afisha_settings_type()-> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ü–æ –º–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data=f"afisha_defautl_type_settings"))
    builder.row(InlineKeyboardButton(text="–î—Ä—É–≥—É—é", callback_data=f"afisha_another_type_settings"))
    return builder.as_markup()