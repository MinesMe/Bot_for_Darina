# app/keyboards.py

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

# --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
EVENT_TYPES_RU = ["–ö–æ–Ω—Ü–µ—Ä—Ç", "–¢–µ–∞—Ç—Ä", "–°–ø–æ—Ä—Ç", "–¶–∏—Ä–∫", "–í—ã—Å—Ç–∞–≤–∫–∞", "–§–µ—Å—Ç–∏–≤–∞–ª—å"]
EVENT_TYPE_EMOJI = {
    "–ö–æ–Ω—Ü–µ—Ä—Ç": "üéµ", "–¢–µ–∞—Ç—Ä": "üé≠", "–°–ø–æ—Ä—Ç": "üèÖ", "–¶–∏—Ä–∫": "üé™",
    "–í—ã—Å—Ç–∞–≤–∫–∞": "üé®", "–§–µ—Å—Ç–∏–≤–∞–ª—å": "üéâ",
}

# --- –û–°–ù–û–í–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def get_main_menu_keyboard(lexicon) -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text=lexicon.get('main_menu_button_afisha')),
        KeyboardButton(text=lexicon.get('main_menu_button_subs'))
    )
    builder.row(
        KeyboardButton(text=lexicon.get('main_menu_button_profile')),
        KeyboardButton(text=lexicon.get('main_menu_button_search'))
    )
    return builder.as_markup(resize_keyboard=True)

def get_profile_keyboard(lexicon) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text=lexicon.get('profile_button_location'), callback_data="change_location")
    builder.button(text=lexicon.get('profile_button_subs'), callback_data="show_my_subscriptions_from_profile")
    builder.adjust(1)
    return builder.as_markup()

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –û–ù–ë–û–†–î–ò–ù–ì–ê ---
def get_country_selection_keyboard(countries: list, lexicon) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for country in countries:
        builder.button(text=country, callback_data=f"main_geo_settings:{country}")
    builder.adjust(2)
    return builder.as_markup()

def get_main_geo_settings(lexicon)-> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data=f"select_home_country"))
    builder.row(InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data=f"finish_preferences_selection:{False}"))
    return builder.as_markup()

def get_home_city_selection_keyboard(top_cities: list, lexicon) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for city in top_cities:
        builder.button(text=city, callback_data=f"select_home_city:{city}")
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="üîé –ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="search_for_home_city"))
    return builder.as_markup()

def get_found_home_cities_keyboard(found_cities: list, lexicon) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for city in found_cities:
        builder.button(text=city, callback_data=f"select_home_city:{city}")
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text=lexicon.get('back_button'), callback_data="back_to_city_selection"))
    return builder.as_markup()

def get_event_type_selection_keyboard(lexicon, selected_types: list = None) -> InlineKeyboardMarkup:
    if selected_types is None: selected_types = []
    builder = InlineKeyboardBuilder()
    for event_type in EVENT_TYPES_RU:
        text = f"‚úÖ {event_type}" if event_type in selected_types else f"‚¨úÔ∏è {event_type}"
        builder.button(text=text, callback_data=f"toggle_event_type:{event_type}")
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text=lexicon.get('finish_button'), callback_data="finish_preferences_selection:{True}"))
    return builder.as_markup()

def get_back_to_city_selection_keyboard(lexicon) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text=lexicon.get('back_button'), callback_data="back_to_city_selection")
    return builder.as_markup()

# --- –ù–û–í–´–ï –ò –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –ü–û–î–ü–ò–°–û–ö ---

def get_my_subscriptions_keyboard(items: list) -> InlineKeyboardMarkup:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å/–Ω–∞–π—Ç–∏".
    """
    builder = InlineKeyboardBuilder()
    if items:
        for item in items:
            builder.button(text=f"‚ùå {item}", callback_data=f"unsubscribe:{item}")
        builder.adjust(1)
    builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å/–Ω–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="add_new_subscription"))
    return builder.as_markup()

def get_general_onboarding_keyboard() -> InlineKeyboardMarkup:
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±—â–µ–π –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="üëç –î–∞, –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="setup_general_mobility")
    builder.button(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_general_mobility")
    builder.adjust(1)
    return builder.as_markup()

def get_region_selection_keyboard(all_countries: list, selected_regions: list, for_general: bool = False) -> InlineKeyboardMarkup:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–ª–∞–≥–∞ for_general –º–µ–Ω—è–µ—Ç callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ".
    """
    builder = InlineKeyboardBuilder()
    for country in all_countries:
        text = f"‚úÖ {country}" if country in selected_regions else f"‚¨úÔ∏è {country}"
        builder.button(text=text, callback_data=f"toggle_region:{country}")
    builder.adjust(2)
    finish_callback = "finish_general_selection" if for_general else "finish_custom_selection"
    builder.row(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=finish_callback))
    return builder.as_markup()

def get_add_sub_action_keyboard(show_setup_mobility_button: bool = False) -> InlineKeyboardMarkup:
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä: –Ω–∞–ø–∏—Å–∞—Ç—å –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.
    –ú–æ–∂–µ—Ç —Ç–∞–∫–∂–µ –≤–∫–ª—é—á–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—â–µ–π –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞—Ä—Ç–∏—Å—Ç–∞", callback_data="write_artist")
    builder.button(text="üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="import_artists")
    builder.adjust(1)
    if show_setup_mobility_button:
        builder.row(InlineKeyboardButton(text="üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—â—É—é –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å", callback_data="setup_general_mobility"))
    return builder.as_markup()


def get_mobility_type_choice_keyboard() -> InlineKeyboardMarkup:
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="üåç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–∏–µ", callback_data="use_general_mobility")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="setup_custom_mobility")
    builder.adjust(1)
    return builder.as_markup()

def get_add_more_or_finish_keyboard(show_setup_mobility_button: bool = False) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ü–∏–∫–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∞—Ä—Ç–∏—Å—Ç–∞", callback_data="write_artist")
    builder.button(text="üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="import_artists")
    if show_setup_mobility_button:
         builder.row(InlineKeyboardButton(text="üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—â—É—é –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å", callback_data="setup_general_mobility"))
    builder.row(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish_adding_subscriptions"))
    return builder.as_markup()


# --- –û–°–¢–ê–õ–¨–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ ---

def found_artists_keyboard(artists: list) -> InlineKeyboardMarkup:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    builder = InlineKeyboardBuilder()
    for artist in artists:
        builder.button(text=f"{artist}", callback_data=f"subscribe_to_artist:{artist}")
    builder.adjust(1)
    builder.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_artist_search"))
    return builder.as_markup()

def get_paginated_artists_keyboard(all_artists: list, selected_artists: set, page: int = 0) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    PAGE_SIZE = 5
    start, end = page * PAGE_SIZE, (page + 1) * PAGE_SIZE
    artists_on_page = all_artists[start:end]
    for artist in artists_on_page:
        text = f"‚úÖ {artist}" if artist in selected_artists else f"‚¨úÔ∏è {artist}"
        builder.button(text=text, callback_data=f"toggle_artist_subscribe:{artist}")
    builder.adjust(1)
    total_pages = (len(all_artists) + PAGE_SIZE - 1) // PAGE_SIZE
    if total_pages > 1:
        pagination_buttons = []
        if page > 0:
            pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"paginate_artists:{page - 1}"))
        pagination_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="ignore"))
        if page < total_pages - 1:
            pagination_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"paginate_artists:{page + 1}"))
        builder.row(*pagination_buttons)
    builder.row(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish_artist_selection"))
    return builder.as_markup()

def get_categories_keyboard(categories: list = None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    source_list = categories if categories else EVENT_TYPES_RU
    for category in source_list:
        emoji = EVENT_TYPE_EMOJI.get(category, "üîπ")
        builder.button(text=f"{emoji} {category}", callback_data=f"category:{category}")
    builder.adjust(2)
    return builder.as_markup()

def get_cities_keyboard(cities: list, category: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for city in cities:
        builder.button(text=city, callback_data=f"city:{city}:{category}")
    builder.adjust(2)
    return builder.as_markup()

#---------- –ê–§–ò–®–ê ----------

def get_afisha_settings()-> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data=f"afisha_main_geo_settings"))
    builder.row(InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data=f"skip_afisha_main_geo"))
    return builder.as_markup()

def get_afisha_settings_type()-> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ü–æ –º–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data=f"afisha_defautl_type_settings"))
    builder.row(InlineKeyboardButton(text="–î—Ä—É–≥—É—é", callback_data=f"afisha_another_type_settings"))
    return builder.as_markup()