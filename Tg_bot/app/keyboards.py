# app/keyboards.py

from datetime import datetime
import locale
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from dateutil.relativedelta import relativedelta

# --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
EVENT_TYPES_RU = ["–ö–æ–Ω—Ü–µ—Ä—Ç", "–¢–µ–∞—Ç—Ä", "–°–ø–æ—Ä—Ç", "–¶–∏—Ä–∫", "–í—ã—Å—Ç–∞–≤–∫–∞", "–§–µ—Å—Ç–∏–≤–∞–ª—å"]
EVENT_TYPE_EMOJI = {
    "–ö–æ–Ω—Ü–µ—Ä—Ç": "üéµ", "–¢–µ–∞—Ç—Ä": "üé≠", "–°–ø–æ—Ä—Ç": "üèÖ", "–¶–∏—Ä–∫": "üé™",
    "–í—ã—Å—Ç–∞–≤–∫–∞": "üé®", "–§–µ—Å—Ç–∏–≤–∞–ª—å": "üéâ",
}

RU_MONTH_NAMES = [
    "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
    "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
]


# --- –û–°–ù–û–í–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def get_main_menu_keyboard(lexicon) -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text=lexicon.get('main_menu_button_afisha')),
        KeyboardButton(text=lexicon.get('main_menu_button_subs'))
    )
    builder.row(
        KeyboardButton(text=lexicon.get('main_menu_button_profile')),
        KeyboardButton(text=lexicon.get('main_menu_button_favorites')),
    )
    return builder.as_markup(resize_keyboard=True)

def get_profile_keyboard(lexicon) -> InlineKeyboardMarkup:
    """
    –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="üìç –ò–∑–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –≥–µ–æ", callback_data="edit_main_geo")
    builder.button(text="üåç –ò–∑–º–µ–Ω–∏—Ç—å –æ–±—â—É—é –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å", callback_data="edit_general_mobility")
    builder.button(text="‚≠ê –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="manage_my_subscriptions")
    builder.adjust(1) # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –û–ù–ë–û–†–î–ò–ù–ì–ê ---
def get_country_selection_keyboard(countries: list, lexicon) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for country in countries:
        builder.button(text=country, callback_data=f"main_geo_settings:{country}")
    builder.adjust(2)
    return builder.as_markup()


def get_main_geo_settings(lexicon)-> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data=f"select_home_country"))
    builder.row(InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data=f"finish_preferences_selection:{False}"))
    return builder.as_markup()

def get_home_city_selection_keyboard(top_cities: list, lexicon) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for city in top_cities:
        builder.button(text=city, callback_data=f"select_home_city:{city}")
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="üîé –ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="search_for_home_city"))
    return builder.as_markup()

def get_found_home_cities_keyboard(found_cities: list, lexicon) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for city in found_cities:
        builder.button(text=city, callback_data=f"select_home_city:{city}")
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text=lexicon.get('back_button'), callback_data="back_to_city_selection"))
    return builder.as_markup()

def get_event_type_selection_keyboard(lexicon, selected_types: list = None) -> InlineKeyboardMarkup:
    if selected_types is None: selected_types = []
    builder = InlineKeyboardBuilder()
    for event_type in EVENT_TYPES_RU:
        text = f"‚úÖ {event_type}" if event_type in selected_types else f"‚¨úÔ∏è {event_type}"
        builder.button(text=text, callback_data=f"toggle_event_type:{event_type}")
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text=lexicon.get('finish_button'), callback_data="finish_preferences_selection:{True}"))
    return builder.as_markup()

def get_back_to_city_selection_keyboard(lexicon) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text=lexicon.get('back_button'), callback_data="back_to_city_selection")
    return builder.as_markup()

# --- –ù–û–í–´–ï –ò –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –ü–û–î–ü–ò–°–û–ö ---

def get_manage_subscriptions_keyboard(subscriptions: list, lexicon) -> InlineKeyboardMarkup:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫. –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –µ–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å".
    """
    builder = InlineKeyboardBuilder()
    if subscriptions:
        for sub_event in subscriptions:
            # –ò—â–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
            # (–≤ 99% —Å–ª—É—á–∞–µ–≤ –æ–Ω–∞ –±—É–¥–µ—Ç –æ–¥–Ω–∞, –Ω–æ —ç—Ç–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
            user_subscription = next((sub for sub in sub_event.subscriptions), None)
            
            status_emoji = ""
            if user_subscription:
                status_emoji = "‚ñ∂Ô∏è" if user_subscription.status == 'active' else "‚è∏Ô∏è"

            button_text = f"{status_emoji} {sub_event.title}"
            
            builder.button(
                text=button_text, 
                callback_data=f"view_subscription:{sub_event.event_id}"
            )
        builder.adjust(1)
    
    builder.row(InlineKeyboardButton(text=lexicon.get('back_to_profile_button'), callback_data="back_to_profile"))
    return builder.as_markup()

def get_edit_country_keyboard(countries: list, lexicon) -> InlineKeyboardMarkup:
    """–ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ."""
    builder = InlineKeyboardBuilder()
    for country in countries:
        builder.button(text=country, callback_data=f"edit_country:{country}")
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile"))
    return builder.as_markup()

def get_edit_city_keyboard(top_cities: list, lexicon) -> InlineKeyboardMarkup:
    """–ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ."""
    builder = InlineKeyboardBuilder()
    for city in top_cities:
        builder.button(text=city, callback_data=f"edit_city:{city}")
    builder.adjust(2)
    # --- –î–û–ë–ê–í–õ–ï–ù–ê –ö–ù–û–ü–ö–ê –ü–û–ò–°–ö–ê –° –£–ù–ò–ö–ê–õ–¨–ù–´–ú CALLBACK ---
    builder.row(InlineKeyboardButton(text="üîé –ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="edit_search_for_city"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã", callback_data="back_to_edit_country"))
    return builder.as_markup()
    
def get_edit_event_type_keyboard(lexicon, selected_types: list = None) -> InlineKeyboardMarkup:
    """–ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ."""
    if selected_types is None: selected_types = []
    builder = InlineKeyboardBuilder()
    for event_type in EVENT_TYPES_RU:
        text = f"‚úÖ {event_type}" if event_type in selected_types else f"‚¨úÔ∏è {event_type}"
        builder.button(text=text, callback_data=f"edit_toggle_event_type:{event_type}")
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="finish_edit_preferences"))
    return builder.as_markup()

def get_edit_found_cities_keyboard(found_cities: list, lexicon) -> InlineKeyboardMarkup:
    """–ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª–µ."""
    builder = InlineKeyboardBuilder()
    for city in found_cities:
        builder.button(text=city, callback_data=f"edit_city:{city}")
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞", callback_data="back_to_edit_city_list"))
    return builder.as_markup()

def get_single_subscription_manage_keyboard(event_id: int, current_status: str, lexicon) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.
    """
    builder = InlineKeyboardBuilder()
    
    # –£–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if current_status == 'active':
        toggle_button_text = lexicon.get('subs_pause_button') # "‚è∏Ô∏è –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É"
    else:
        toggle_button_text = lexicon.get('subs_resume_button') # "‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å"
        
    builder.button(text=toggle_button_text, callback_data=f"toggle_sub_status:{event_id}")
    builder.button(text=lexicon.get('subs_unsubscribe_button'), callback_data=f"delete_subscription:{event_id}") # –ò—Å–ø–æ–ª—å–∑—É–µ–º delete_subscription, –∫–∞–∫ –≤ —Ö—ç–Ω–¥–ª–µ—Ä–µ
    
    builder.row(InlineKeyboardButton(text=lexicon.get('back_to_subscriptions_list_button'), callback_data="back_to_subscriptions_list"))
    return builder.as_markup()

def get_general_onboarding_keyboard() -> InlineKeyboardMarkup:
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±—â–µ–π –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="üëç –î–∞, –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="setup_general_mobility")
    builder.button(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_general_mobility")
    builder.adjust(1)
    return builder.as_markup()

def get_region_selection_keyboard(
    all_countries: list, 
    selected_regions: list, 
    finish_callback: str,
    back_callback: str  # <--- –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
) -> InlineKeyboardMarkup:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç finish_callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ì–æ—Ç–æ–≤–æ' –∏ back_callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'.
    """
    builder = InlineKeyboardBuilder()
    for country in all_countries:
        text = f"‚úÖ {country}" if country in selected_regions else f"‚¨úÔ∏è {country}"
        builder.button(text=text, callback_data=f"toggle_region:{country}")
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=finish_callback))  
    
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º callback_, –≤—ã –ø—Ä–∞–≤—ã. –ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, —è —É—Å–ª–æ–∂–Ω–∏–ª –∏data
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback))
    
    return builder.as_markup()


def get_add_sub_action_keyboard(show_setup_mobility_button: bool = False) -> InlineKeyboardMarkup:
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä: –Ω–∞–ø–∏—Å–∞—Ç—å –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.
    –ú–æ–∂–µ—Ç —Ç–∞–∫–∂–µ –≤–∫–ª—é—á–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—â–µ–π –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞—Ä—Ç–∏—Å—Ç–∞", callback_data="write_artist")
    builder.button(text="üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="import_artists")
    builder.adjust(1)
    if show_setup_mobility_button:
        builder.row(InlineKeyboardButton(text="üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—â—É—é –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å", callback_data="setup_general_mobility"))
    return builder.as_markup()


def get_mobility_type_choice_keyboard() -> InlineKeyboardMarkup:
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="üåç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–∏–µ", callback_data="use_general_mobility")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="setup_custom_mobility")
    builder.adjust(1)
    return builder.as_markup()

def get_add_more_or_finish_keyboard(show_setup_mobility_button: bool = False) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ü–∏–∫–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∞—Ä—Ç–∏—Å—Ç–∞", callback_data="write_artist")
    builder.button(text="üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="import_artists")
    if show_setup_mobility_button:
         builder.row(InlineKeyboardButton(text="üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—â—É—é –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å", callback_data="setup_general_mobility"))
    builder.row(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish_adding_subscriptions"))
    return builder.as_markup()


# --- –û–°–¢–ê–õ–¨–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ ---

def found_artists_keyboard(artists) -> InlineKeyboardMarkup:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.
    –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ID –∞—Ä—Ç–∏—Å—Ç–∞ –≤ callback_data.
    """
    builder = InlineKeyboardBuilder()
    for artist in artists:
        # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –æ–±—Ä–µ–∑–∞–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        button_text = artist.name[:40] + '...' if len(artist.name) > 40 else artist.name
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í callback_data –ø–µ—Ä–µ–¥–∞–µ–º ID, –∞ –Ω–µ –∏–º—è
        builder.button(text=button_text, callback_data=f"subscribe_to_artist:{artist.artist_id}")
        
    builder.adjust(1)
    builder.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_artist_search"))
    return builder.as_markup()

def get_paginated_artists_keyboard(all_artists: list, selected_artists: set, page: int = 0) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    PAGE_SIZE = 5
    start, end = page * PAGE_SIZE, (page + 1) * PAGE_SIZE
    artists_on_page = all_artists[start:end]
    for artist in artists_on_page:
        text = f"‚úÖ {artist}" if artist in selected_artists else f"‚¨úÔ∏è {artist}"
        builder.button(text=text, callback_data=f"toggle_artist_subscribe:{artist}")
    builder.adjust(1)
    total_pages = (len(all_artists) + PAGE_SIZE - 1) // PAGE_SIZE
    if total_pages > 1:
        pagination_buttons = []
        if page > 0:
            pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"paginate_artists:{page - 1}"))
        pagination_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="ignore"))
        if page < total_pages - 1:
            pagination_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"paginate_artists:{page + 1}"))
        builder.row(*pagination_buttons)
    builder.row(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish_artist_selection"))
    return builder.as_markup()

def get_categories_keyboard(categories: list = None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    source_list = categories if categories else EVENT_TYPES_RU
    for category in source_list:
        emoji = EVENT_TYPE_EMOJI.get(category, "üîπ")
        builder.button(text=f"{emoji} {category}", callback_data=f"category:{category}")
    builder.adjust(2)
    return builder.as_markup()

def get_cities_keyboard(cities: list, category: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for city in cities:
        builder.button(text=city, callback_data=f"city:{city}:{category}")
    builder.adjust(2)
    return builder.as_markup()

#---------- –ê–§–ò–®–ê ----------

def get_afisha_settings()-> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data=f"afisha_main_geo_settings"))
    builder.row(InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data=f"skip_afisha_main_geo"))
    return builder.as_markup()

def get_afisha_settings_type()-> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ü–æ –º–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data=f"afisha_defautl_type_settings"))
    builder.row(InlineKeyboardButton(text="–î—Ä—É–≥—É—é", callback_data=f"afisha_another_type_settings"))
    return builder.as_markup()

def get_afisha_actions_keyboard(lexicon) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π.
    –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–æ–¥–ø–∏—Å–∫–∏".
    """
    builder = InlineKeyboardBuilder()
    builder.button(
        text=lexicon.get('afisha_add_to_subs_button'), 
        callback_data="add_events_to_subs"
    )
    # –í –±—É–¥—É—â–µ–º —Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ "–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –µ—â–µ" –∏–ª–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
    return builder.as_markup()

def get_date_period_keyboard(lexicon) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text=lexicon.get('period_today'), callback_data="select_period:today"),
        InlineKeyboardButton(text=lexicon.get('period_tomorrow'), callback_data="select_period:tomorrow")
    )
    builder.row(
        InlineKeyboardButton(text=lexicon.get('period_this_week'), callback_data="select_period:this_week"),
        InlineKeyboardButton(text=lexicon.get('period_this_weekend'), callback_data="select_period:this_weekend")
    )
    builder.row(InlineKeyboardButton(text=lexicon.get('period_this_month'), callback_data="select_period:this_month"))
    builder.row(InlineKeyboardButton(text=lexicon.get('period_other_month'), callback_data="select_period:other_month"))
    return builder.as_markup()

def get_month_choice_keyboard(lexicon) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö 12 –º–µ—Å—è—Ü–µ–≤."""
    builder = InlineKeyboardBuilder()
    current_date = datetime.now()
    
    # –£–î–ê–õ–ï–ù–û: –ë–ª–æ–∫ try-except —Å locale.setlocale()
    
    for i in range(12):
        month_date = current_date + relativedelta(months=+i)
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞, –∞ –Ω–µ —á–µ—Ä–µ–∑ strftime
        # month_date.month –≤–µ—Ä–Ω–µ—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12. –í —Å–ø–∏—Å–∫–∞—Ö –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0, –ø–æ—ç—Ç–æ–º—É -1.
        month_name = RU_MONTH_NAMES[month_date.month - 1]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏
        button_text = f"{month_name} {month_date.strftime('%Y')}"
        
        callback_data = month_date.strftime("select_month:%Y-%m")
        builder.button(text=button_text, callback_data=callback_data)
        
    builder.adjust(3)
    builder.row(InlineKeyboardButton(text=lexicon.get('back_to_date_choice_button'), callback_data="back_to_date_choice"))
    return builder.as_markup()

def get_filter_type_choice_keyboard(lexicon) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã."""
    builder = InlineKeyboardBuilder()
    builder.button(text=lexicon.get('afisha_filter_by_my_prefs_button'), callback_data="filter_type:my_prefs")
    builder.button(text=lexicon.get('afisha_filter_by_temporary_button'), callback_data="filter_type:temporary")
    builder.adjust(1)
    builder.row(InlineKeyboardButton(text=lexicon.get('back_to_date_choice_button'), callback_data="back_to_date_choice"))
    return builder.as_markup()

# --- –ù–û–í–´–ô –ë–õ–û–ö: –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" ---

def get_favorites_menu_keyboard( favorites: list, lexicon) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'."""
    builder = InlineKeyboardBuilder()
    
    if favorites:
        for fav in favorites:
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ Telegram
            button_text = fav.name[:40] + '...' if len(fav.name) > 40 else fav.name
            builder.button(text=f"‚≠ê {button_text}", callback_data=f"view_favorite:{fav.artist_id}")
        builder.adjust(1)
    
    # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å" –ø–µ—Ä–µ–µ—Ö–∞–ª–∞ –≤ –¥—Ä—É–≥–æ–π –º–æ–¥—É–ª—å.
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å" —Ç–µ–ø–µ—Ä—å –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞—Ä—Ç–∏—Å—Ç–æ–º.
    
    return builder.as_markup()

def get_favorites_list_keyboard(favorites: list, lexicon) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤.
    –ö–∞–∂–¥—ã–π –∞—Ä—Ç–∏—Å—Ç - —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    builder = InlineKeyboardBuilder()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
    if favorites:
        for fav in favorites:
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ Telegram
            button_text = fav.name[:40] + '...' if len(fav.name) > 40 else fav.name
            builder.button(text=f"‚≠ê {button_text}", callback_data=f"view_favorite:{fav.artist_id}")
        
        # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É —Å –∞—Ä—Ç–∏—Å—Ç–æ–º –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        builder.adjust(1)
    
    # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å" –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º —Ä–∞–∑–¥–µ–ª–µ ("–ù–∞–π—Ç–∏/–¥–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏—Å—Ç–∞")
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å" –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≥–ª—É–±–∂–µ, –≤ –º–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
    # –ü–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π.
    
    return builder.as_markup()

def get_single_favorite_manage_keyboard(artist_id: int, lexicon) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏–∑–±—Ä–∞–Ω–Ω—ã–º –∞—Ä—Ç–∏—Å—Ç–æ–º.
    """
    builder = InlineKeyboardBuilder()
    
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ –µ–µ callback_data –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    builder.button(
        text=lexicon.get('favorite_edit_regions_button'),
        callback_data=f"edit_fav_regions:{artist_id}"
    )
    builder.button(
        text=lexicon.get('favorites_remove_button'),
        callback_data=f"delete_favorite:{artist_id}"
    )
    
    builder.adjust(1)
    
    builder.row(
        InlineKeyboardButton(
            text=lexicon.get('back_to_favorites_list_button'),
            callback_data="back_to_favorites_list"
        )
    )
    return builder.as_markup()

# def get_found_artists_for_favorites_keyboard(artists: list, lexicon) -> InlineKeyboardMarkup:
#     """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ."""
#     builder = InlineKeyboardBuilder()
#     for artist in artists:
#         builder.button(text=artist.name, callback_data=f"add_fav_artist:{artist.artist_id}")
#     builder.adjust(1)
#     builder.row(InlineKeyboardButton(text=lexicon.get('back_to_favorites_menu_button'), callback_data="back_to_favorites_menu"))
#     return builder.as_markup()

# def get_favorites_not_found_keyboard(lexicon) -> InlineKeyboardMarkup:
#     """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–∏—Å–∫ –ø–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É –Ω–∏—á–µ–≥–æ –Ω–µ –¥–∞–ª."""
#     builder = InlineKeyboardBuilder()
#     builder.button(text=lexicon.get('back_to_favorites_menu_button'), callback_data="back_to_favorites_menu")
#     return builder.as_markup()

# def get_remove_from_favorites_keyboard(favorites: list, lexicon ) -> InlineKeyboardMarkup:
#     """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö, –≥–¥–µ –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ - –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
#     builder = InlineKeyboardBuilder()
#     for fav in favorites:
#         builder.button(text=f"üóëÔ∏è {fav.name}", callback_data=f"remove_fav_artist:{fav.artist_id}")
#     builder.adjust(1)
#     builder.row(InlineKeyboardButton(text=lexicon.get('back_to_favorites_menu_button'), callback_data="back_to_favorites_menu"))
#     return builder.as_markup()