import asyncio
import json
import re
import sys
from dataclasses import dataclass, asdict
from typing import Optional, Dict


from playwright.async_api import async_playwright, Browser, TimeoutError as PlaywrightTimeoutError

from test_ai import getArtist

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
CATEGORY_URL = 'https://www.kvitki.by/rus/bileti/teatr/'
PAGES_TO_PARSE = 1
CONCURRENT_EVENTS = 3
MAX_EVENTS_TO_PROCESS = 25

# --- –ú–û–î–ï–õ–¨ –î–ê–ù–ù–´–• ---
@dataclass
class EventData:
    link: str
    title: Optional[str] = None
    place: Optional[str] = None
    time_str: Optional[str] = None
    description: Optional[str] = None  ### <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –î–û–ë–ê–í–õ–ï–ù–û –ü–û–õ–ï
    price_min: Optional[float] = None
    price_max: Optional[float] = None
    tickets_available: Optional[int] = None
    status: str = "ok"

# --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê –û–î–ù–û–ì–û –°–û–ë–´–¢–ò–Ø ---
async def parse_single_event(browser: Browser, event_url: str) -> Dict:
    page = None
    try:
        page = await browser.new_page()
        await page.goto(event_url, timeout=35000)

        # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        try:
            details_json = await page.evaluate('() => window.concertDetails')
        except Exception:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ window.concertDetails")

        if not details_json:
            raise ValueError("–û–±—ä–µ–∫—Ç window.concertDetails –ø—É—Å—Ç.")

        title = details_json.get('title')
        place = details_json.get('venueDescription')
        time_str = details_json.get('localisedStartDate')
        
        price_min_raw = details_json.get('minPrice')
        price_min = float(price_min_raw) if price_min_raw is not None else None
        
        price_max = None
        prices_str = details_json.get('prices', '')
        prices_list = [float(p) for p in re.findall(r'\d+\.?\d*', prices_str.replace(',', '.'))]
        if len(prices_list) > 1:
            price_max = max(prices_list)
        
        description = None
        description_selector = 'div.concert_details_description_description_inner'
        if await page.locator(description_selector).count() > 0:
            raw_text = await page.locator(description_selector).inner_text()
            lines = [line.strip() for line in raw_text.split('\n')]
            description = '\n'.join(line for line in lines if line)

        # 2. –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ (–ù–û–í–ê–Ø –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê)
        tickets_available = 0
        shop_url_button = page.locator('button[data-shopurl]').first
        
        if await shop_url_button.count() > 0:
            shop_url = await shop_url_button.get_attribute('data-shopurl')
            await page.goto(shop_url, timeout=35000)
            
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–∞–±–ª–∏—Ü
            ticket_cells_selector = '[data-cy="price-zone-free-places"], .cdk-column-freePlaces'
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–¥—Å—á–µ—Ç–∞ –±–∏–ª–µ—Ç–æ–≤
            async def find_and_sum_tickets(search_context) -> Optional[int]:
                try:
                    # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–ª–∏ –≤–æ —Ñ—Ä–µ–π–º–µ
                    await search_context.wait_for_selector(ticket_cells_selector, state='visible', timeout=10000)
                    await search_context.wait_for_timeout(500) # –î–æ–ø. –∑–∞–¥–µ—Ä–∂–∫–∞
                    
                    all_counts_text = await search_context.locator(ticket_cells_selector).all_inner_texts()
                    
                    if not all_counts_text:
                        return 0
                    
                    total_tickets = 0
                    for text in all_counts_text:
                        match = re.search(r'\d+', text)
                        if match:
                            total_tickets += int(match.group(0))
                    return total_tickets
                except PlaywrightTimeoutError:
                    return None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

            # –ü–ª–∞–Ω –ê: –ò—â–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            tickets_available = await find_and_sum_tickets(page)

            # –ü–ª–∞–Ω –ë: –ï—Å–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –∏—â–µ–º –≤–æ –≤—Å–µ—Ö iframe
            if tickets_available is None:
                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ iframe –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                frames = page.frames
                for frame in frames[1:]: # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º (—Å–∞–º—É —Å—Ç—Ä–∞–Ω–∏—Ü—É)
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å –±–∏–ª–µ—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ —Ñ—Ä–µ–π–º–∞
                    frame_tickets = await find_and_sum_tickets(frame)
                    if frame_tickets is not None:
                        tickets_available = frame_tickets
                        break # –ù–∞—à–ª–∏ –≤ –ø–µ—Ä–≤–æ–º –∂–µ —Ñ—Ä–µ–π–º–µ, –≤—ã—Ö–æ–¥–∏–º
            
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–∏—Å–∫–æ–≤ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –±–∏–ª–µ—Ç–æ–≤ 0
            if tickets_available is None:
                tickets_available = 0
        else:
            tickets_available = 0
        
        artists = await getArtist(description) # –¢–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è AI
        event = EventData(
            title=title, place=place, time_str=time_str, link=event_url,
            description=artists, 
            price_min=price_min, price_max=price_max, tickets_available=tickets_available
        )
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {title} | –ë–∏–ª–µ—Ç–æ–≤: {tickets_available}", file=sys.stderr)
        return asdict(event)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {event_url}: {e}", file=sys.stderr)
        return asdict(EventData(link=event_url, title=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", status="error"))
    finally:
        if page:
            await page.close()

# --- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø-–û–†–ö–ï–°–¢–†–ê–¢–û–† ---
async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ Playwright...", file=sys.stderr)
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()

        # 1. –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –∏–≤–µ–Ω—Ç—ã
        event_links = set()
        for page_num in range(1, PAGES_TO_PARSE + 1):
            url = f"{CATEGORY_URL}page:{page_num}/"
            print(f"üìÑ –°–∫–∞–Ω–∏—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º: {url}", file=sys.stderr)
            try:
                await page.goto(url, timeout=30000)
                await page.wait_for_selector('a.event_short', timeout=15000)
            except PlaywrightTimeoutError:
                print("   - –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", file=sys.stderr)
                break

            locators = page.locator('a.event_short')
            count = await locators.count()
            for i in range(count):
                link = await locators.nth(i).get_attribute('href')
                if link:
                    event_links.add(link)
            print(f"   - –ù–∞–π–¥–µ–Ω–æ {count} —Å—Å—ã–ª–æ–∫.", file=sys.stderr)

        await page.close()
        
        event_links_list = list(event_links)[:MAX_EVENTS_TO_PROCESS]
        print(f"\nüîó –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ {len(event_links)} —Å—Å—ã–ª–æ–∫. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–µ—Ä–≤—ã–µ {len(event_links_list)}...", file=sys.stderr)
        
        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        semaphore = asyncio.Semaphore(CONCURRENT_EVENTS)
        tasks = []

        async def run_with_semaphore(link):
            async with semaphore:
                return await parse_single_event(browser, link)

        for link in event_links_list:
            tasks.append(asyncio.create_task(run_with_semaphore(link)))
        
        results = await asyncio.gather(*tasks)
        await browser.close()

        # 3. –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_results = [res for res in results if res['status'] == 'ok']
        
        print(f"\nüéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù. –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(final_results)} —Å–æ–±—ã—Ç–∏–π.", file=sys.stderr)
        
        json_output = json.dumps(final_results, indent=2, ensure_ascii=False)
        print(json_output)


if __name__ == "__main__":
    asyncio.run(main())