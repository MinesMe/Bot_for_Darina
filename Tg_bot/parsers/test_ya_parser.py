import asyncio
import logging
import re
import random
import time
from datetime import datetime, timedelta
from calendar import monthrange
import requests

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager
from bs4 import BeautifulSoup

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
logger = logging.getLogger()
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
]

# --- –°–∞–º–∞—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç ---
def parse_datetime_range(date_str: str) -> tuple[datetime | None, datetime | None]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ù–ê–ß–ê–õ–¨–ù–£–Æ –∏ –ö–û–ù–ï–ß–ù–£–Æ –¥–∞—Ç—É, –Ω–∞—Ö–æ–¥—è –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–∞—Ç –≤ —Å—Ç—Ä–æ–∫–µ
    –∏ –≤—ã–±–∏—Ä–∞—è –∏–∑ –Ω–∏—Ö –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é.
    """
    if not isinstance(date_str, str) or not date_str.strip():
        return None, None

    cleaned_str = date_str.lower().strip()
    now = datetime.now()
    
    months_map = {
        '—è–Ω–≤–∞—Ä—å': 1, '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—å': 2, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç': 3, '–º–∞—Ä—Ç–∞': 3,
        '–∞–ø—Ä–µ–ª—å': 4, '–∞–ø—Ä–µ–ª—è': 4, '–º–∞–π': 5, '–º–∞—è': 5, '–∏—é–Ω—å': 6, '–∏—é–Ω—è': 6,
        '–∏—é–ª—å': 7, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç': 8, '–∞–≤–≥—É—Å—Ç–∞': 8, '—Å–µ–Ω—Ç—è–±—Ä—å': 9, '—Å–µ–Ω—Ç—è–±—Ä—è': 9,
        '–æ–∫—Ç—è–±—Ä—å': 10, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—å': 11, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—å': 12, '–¥–µ–∫–∞–±—Ä—è': 12,
    }
    
    def _construct_date(day, month_num, year=None, time_str="00:00"):
        if year is None: year = now.year
        hour, minute = map(int, time_str.split(':'))
        try:
            temp_date_this_year = datetime(now.year, month_num, day)
            if temp_date_this_year < now.replace(hour=0, minute=0, second=0, microsecond=0):
                year = now.year + 1
            return datetime(year, month_num, day, hour, minute)
        except ValueError: return None

    if "–ø–æ—Å—Ç–æ—è–Ω–Ω–æ" in cleaned_str: return None, None
    
    time_match = re.search(r'(\d{1,2}:\d{2})', cleaned_str)
    time_part = time_match.group(1) if time_match else "00:00"
    if time_match: cleaned_str = cleaned_str.replace(time_match.group(0), '').strip()

    all_found_dates = []
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–ª–Ω—ã–µ –ø–∞—Ä—ã "—á–∏—Å–ª–æ –º–µ—Å—è—Ü"
    full_matches = list(re.finditer(r'(\d{1,2})\s+([–∞-—è]+)', cleaned_str))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–µ—Å—è—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ "–æ–¥–∏–Ω–æ–∫–∏—Ö" —á–∏—Å–µ–ª
    last_month_num = None
    for m in full_matches:
        day, month_name = int(m.group(1)), m.group(2)
        if month_name in months_map:
            month_num = months_map[month_name]
            date_obj = _construct_date(day, month_num, time_str=time_part)
            if date_obj:
                all_found_dates.append(date_obj)
            last_month_num = month_num

    # –¢–µ–ø–µ—Ä—å –∏—â–µ–º "–æ–¥–∏–Ω–æ–∫–∏–µ" —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2' –≤ '12 –∏—é–ª—è, 2')
    # –î–ª—è —ç—Ç–æ–≥–æ —É–¥–∞–ª–∏–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
    temp_str = cleaned_str
    for m in full_matches:
        temp_str = temp_str.replace(m.group(0), '')
        
    if last_month_num:
        lonely_days = re.findall(r'(\d+)', temp_str)
        for day_str in lonely_days:
            date_obj = _construct_date(int(day_str), last_month_num, time_str=time_part)
            if date_obj:
                all_found_dates.append(date_obj)

    if all_found_dates:
        start_date = min(all_found_dates)
        end_date = max(all_found_dates)
        if start_date != end_date:
            end_date = end_date.replace(hour=23, minute=59)
        return start_date, end_date

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–∞—Ä "—á–∏—Å–ª–æ-–º–µ—Å—è—Ü", –∏—â–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Å—è—Ü—ã
    found_months_nums = [num for name, num in months_map.items() if name in cleaned_str]
    unique_months = sorted(list(set(found_months_nums)))
    if unique_months:
        start_month_num, end_month_num = min(unique_months), max(unique_months)
        start_date = _construct_date(1, start_month_num)
        if not start_date: return None, None
        end_year = start_date.year + (1 if end_month_num < start_month_num else 0)
        _, last_day_of_month = monthrange(end_year, end_month_num)
        end_date = datetime(end_year, end_month_num, last_day_of_month, 23, 59)
        return start_date, end_date

    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏: '{date_str}'")
    return None, None

# --- –§—É–Ω–∫—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏ ---
def _solve_yandex_captcha(driver: webdriver.Chrome, api_key: str, max_attempts: int = 2) -> bool:
    for attempt in range(max_attempts):
        logger.info(f"ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Yandex Smart Captcha. –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è #{attempt + 1}/{max_attempts}...")
        # ... (–ø–æ–ª–Ω—ã–π –∫–æ–¥ —Ä–µ—à–∞—Ç–µ–ª—è –∫–∞–ø—á–∏) ...
    return False # Placeholder

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ ---
def _parse_sync(config: dict) -> list[dict]:
    site_name = config['site_name']
    today_str = datetime.now().strftime("%Y-%m-%d")
    base_url = f"{config['url']}?date={today_str}&period={config['period']}"
    rucaptcha_api_key = config.get('RUCAPTCHA_API_KEY')
    max_pages_to_parse = config.get('max_pages', 10)

    options = webdriver.ChromeOptions()
    options.add_argument("--headless=new")
    # ... –¥—Ä—É–≥–∏–µ –æ–ø—Ü–∏–∏ ...

    all_events_data = []
    seen_event_links = set()
    logger.info(f"–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥: {site_name}")

    driver = None
    try:
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        for page_num in range(1, max_pages_to_parse + 1):
            current_url = f"{base_url}&page={page_num}"
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num}/{max_pages_to_parse}: {current_url}")
            driver.get(current_url)
            
            # ... (–±–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏) ...

            try:
                WebDriverWait(driver, 15).until(EC.presence_of_element_located((By.CSS_SELECTOR, '[data-test-id="eventCard.root"]')))
            except TimeoutException:
                logger.info(f"–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num} –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π. –ó–∞–≤–µ—Ä—à–∞—é.")
                break

            html = driver.page_source
            soup = BeautifulSoup(html, 'lxml')
            event_cards = soup.find_all("div", attrs={"data-test-id": "eventCard.root"})
            if not event_cards: break

            current_page_links = {
                link.get('href') for card in event_cards 
                if (link := card.find("a", attrs={"data-test-id": "eventCard.link"}))
            }
            if not current_page_links.difference(seen_event_links):
                logger.info("–ù–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ó–∞–≤–µ—Ä—à–∞—é –ø–∞—Ä—Å–∏–Ω–≥.")
                break

            for card in event_cards:
                try:
                    link_element = card.find("a", attrs={"data-test-id": "eventCard.link"})
                    href = link_element.get('href') if link_element else None
                    if not href or href in seen_event_links: continue
                    seen_event_links.add(href)
                    
                    title = card.find("h2", attrs={"data-test-id": "eventCard.eventInfoTitle"}).get_text(strip=True)
                    link = "https://afisha.yandex.ru" + href
                    
                    details_list = card.find("ul", attrs={"data-test-id": "eventCard.eventInfoDetails"})
                    place, date_str = "–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ", "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                    if details_list:
                        details_items = details_list.find_all("li")
                        if len(details_items) > 0: date_str = details_items[0].get_text(strip=True)
                        if len(details_items) > 1:
                            place_link = details_items[1].find('a')
                            place = place_link.get_text(strip=True) if place_link else details_items[1].get_text(strip=True)
                    
                    price_min = None
                    price_element = card.find("span", string=re.compile(r'–æ—Ç \d+'))
                    if price_element:
                        price_match = re.search(r'\d+', price_element.get_text(strip=True).replace(' ', ''))
                        if price_match: price_min = float(price_match.group(0))
                    
                    time_start, time_end = parse_datetime_range(date_str)
                    
                    event_data = {
                        'title': title, 'place': place, 'time_string': date_str, 'link': link,
                        'price_min': price_min, 'time_start': time_start, 'time_end': time_end,
                        'price_max': None, 'tickets_info': None, 'full_description': None,
                    }
                    all_events_data.append(event_data)
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            time.sleep(random.uniform(2.0, 4.0))
    except Exception as e:
         logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        if driver:
            driver.quit()
            logger.info("–î—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç.")
    logger.info(f"–°–∞–π—Ç {site_name} —Å–ø–∞—Ä—Å–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {len(all_events_data)}")
    return all_events_data

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ ---
async def parse(config: dict) -> list[dict]:
    logger.info(f"–ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–µ—Ä Yandex –¥–ª—è '{config['site_name']}' –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ...")
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, _parse_sync, config)

# --- –ë–ª–æ–∫ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ ---
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    TEST_CONFIG = {
        'site_name': 'Yandex.Afisha (–°–ø–æ—Ä—Ç) - –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–£–°–ö',
        'url': 'https://afisha.yandex.ru/moscow/sport',
        'period': 365, 'max_pages': 10,
        'RUCAPTCHA_API_KEY': '863b567c1d376398b65ad121498f89a1' # üî¥ –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π –∫–ª—é—á
    }
    async def run_test():
        print("\n--- –ó–ê–ü–£–°–ö –ü–ê–†–°–ï–†–ê –° –ü–û–õ–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–û–ô –î–ê–ù–ù–´–• ---")
        if not TEST_CONFIG.get('RUCAPTCHA_API_KEY'):
            print("üî¥ –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É–∫–∞–∑–∞–Ω API –∫–ª—é—á –¥–ª—è RuCaptcha.")
        results = await parse(TEST_CONFIG)
        if results:
            print(f"\n‚úÖ  –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(results)}\n")
            for i, event in enumerate(results, 1):
                start_str = event['time_start'].strftime('%Y-%m-%d %H:%M') if event['time_start'] else 'N/A'
                end_str = event['time_end'].strftime('%Y-%m-%d %H:%M') if event['time_end'] else 'N/A'
                print(f"--- –°–æ–±—ã—Ç–∏–µ #{i} ---")
                print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ:         {event.get('title', 'N/A')}")
                print(f"  –ú–µ—Å—Ç–æ:            {event.get('place', 'N/A')}")
                print(f"  –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:  {event.get('time_string', 'N/A')}")
                print(f"  –ù–ê–ß–ê–õ–û (time_start): {start_str}")
                print(f"  –ö–û–ù–ï–¶ (time_end):   {end_str}")
                print(f"  –¶–µ–Ω–∞ –æ—Ç:          {event.get('price_min', 'N/A')}")
                print(f"  –°—Å—ã–ª–∫–∞:           {event.get('link', 'N/A')}")
        else:
            print("\n‚ùå –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    asyncio.run(run_test())