import asyncio
import re
from datetime import datetime
from sqlalchemy import select, delete, inspect, func

from app.database.models import async_session, engine, Country, Venue, EventType, Artist, Event, EventLink, EventArtist
from parsers.configs import ALL_CONFIGS

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞—à–∏ –ø–∞—Ä—Å–µ—Ä—ã
from parsers.kvitki_parser import parse_site as parse_kvitki
from parsers.bezkassira_parser import parse as parse_bezkassira
from parsers.liveball_parser import parse as parse_liveball
from parsers.yandex_parser import parse as parse_yandex

import app.database.requests as rq


async def check_tables_exist():
    async with engine.connect() as conn:
        def has_table_sync(sync_conn):
            inspector = inspect(sync_conn)
            return inspector.has_table("events")

        return await conn.run_sync(has_table_sync)


async def populate_artists_if_needed(session):
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∞—Ä—Ç–∏—Å—Ç–æ–≤...")
    count_result = await session.execute(select(func.count(Artist.artist_id)))
    if count_result.scalar_one() > 0:
        print("–¢–∞–±–ª–∏—Ü–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
        return
    print("–¢–∞–±–ª–∏—Ü–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –ø—É—Å—Ç–∞. –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ artists.txt...")
    try:
        with open('artists.txt', 'r', encoding='utf-8') as f:
            artists_to_add = [line.strip() for line in f if line.strip()]
        if not artists_to_add:
            print("–§–∞–π–ª artists.txt –ø—É—Å—Ç. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(artists_to_add)} –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ. –î–æ–±–∞–≤–ª—è—é –≤ –±–∞–∑—É...")
        for i, artist_name in enumerate(artists_to_add):
            session.add(Artist(name=artist_name))
            if (i + 1) % 1000 == 0:
                print(f"  –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é {i + 1} –∞—Ä—Ç–∏—Å—Ç–æ–≤...")
        await session.commit()
        print(f"–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(artists_to_add)}.")
    except FileNotFoundError:
        print("–û–®–ò–ë–ö–ê: –§–∞–π–ª artists.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ –º–æ–≥—É –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∞—Ä—Ç–∏—Å—Ç–æ–≤: {e}")



def extract_city_from_place(place_string: str) -> str:
    if not place_string:
        return "–ú–∏–Ω—Å–∫"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–∞–π—Ç–æ–≤

    # –î–ª—è –Ø–Ω–¥–µ–∫—Å.–ê—Ñ–∏—à–∏ –≥–æ—Ä–æ–¥ –≤—Å–µ–≥–¥–∞ –ú–æ—Å–∫–≤–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø–∞—Ä—Å–∏–º moscow
    if 'afisha.yandex.ru/moscow' in place_string:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ —Å –Ø–Ω–¥–µ–∫—Å–∞
        return "–ú–æ—Å–∫–≤–∞"

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–∞–π—Ç–æ–≤ (kvitki, bezkassira, liveball)
    parts = place_string.split(',')
    if len(parts) > 1:
        city = parts[-1].strip()
        if not any(char.isdigit() for char in city):
            return city
    parts_space = place_string.split()
    if len(parts_space) > 1 and parts_space[-1].isalpha():
        city_candidate = parts_space[-1]
        known_cities_lower = ["–º–∏–Ω—Å–∫", "–±—Ä–µ—Å—Ç", "–≤–∏—Ç–µ–±—Å–∫", "–≥–æ–º–µ–ª—å", "–≥—Ä–æ–¥–Ω–æ", "–º–æ–≥–∏–ª–µ–≤"]
        if city_candidate.lower() in known_cities_lower:
            return city_candidate.capitalize()
    known_cities = ["–ú–∏–Ω—Å–∫", "–ë—Ä–µ—Å—Ç", "–í–∏—Ç–µ–±—Å–∫", "–ì–æ–º–µ–ª—å", "–ì—Ä–æ–¥–Ω–æ", "–ú–æ–≥–∏–ª–µ–≤", "–õ–∏–¥–∞", "–ú–æ–ª–æ–¥–µ—á–Ω–æ", "–°–º–æ—Ä–≥–æ–Ω—å",
                    "–ù–µ—Å–≤–∏–∂"]
    for city in known_cities:
        if city.lower() in place_string.lower():
            return city
    return "–ú–∏–Ω—Å–∫"

async def process_all_sites():
    tables_exist = await check_tables_exist()
    if not tables_exist:
        print("\n–û–®–ò–ë–ö–ê: –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ main.py, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã, –∞ –∑–∞—Ç–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ (Ctrl+C).")
        return
    async with async_session() as session:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤ –Ω–∞—á–∞–ª–µ
        await populate_artists_if_needed(session)

    all_events_with_types = []
    for site_config in ALL_CONFIGS:
        # ... (–ª–æ–≥–∏–∫–∞ –≤—ã–∑–æ–≤–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤)
        event_type_name = site_config.get('event_type', '–î—Ä—É–≥–æ–µ')
        events_from_site = []
        parsing_method = site_config.get('parsing_method')

        if parsing_method == 'json': events_from_site = parse_kvitki(site_config)
        elif parsing_method == 'bs4_bezkassira': events_from_site = parse_bezkassira(site_config)
        elif parsing_method == 'bs4_liveball': events_from_site = parse_liveball(site_config)
        elif parsing_method == 'selenium_yandex': events_from_site = parse_yandex(site_config)
        else: continue

        for event in events_from_site:
            event['event_type'] = event_type_name
        all_events_with_types.extend(events_from_site)

    if not all_events_with_types:
        print("–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —Å–∞–π—Ç–æ–≤. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É.")
        return

    print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_events_with_types)} —Å–æ–±—ã—Ç–∏–π. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    events_created_count = 0
    events_updated_count = 0

    for event_data in all_events_with_types:
        if 'title' not in event_data:
            print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞.")
            continue

        place = event_data.get('place', '–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        link = event_data.get('link')
        time_info = event_data.get('time', '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        city = extract_city_from_place(place)
        
        start_datetime = None
        if event_data.get('timestamp'):
            try:
                start_datetime = datetime.fromtimestamp(event_data['timestamp'])
            except (ValueError, TypeError):
                start_datetime = None

        prepared_data = {
            "event_type": event_data['event_type'],
            "venue": place,
            "city": city,
            "event_title": event_data['title'],
            "timestamp": start_datetime,
            "time": time_info,
            "price_min": event_data.get('price_min'),
            "price_max": event_data.get('price_max'),
            "link": link,
            "tickets_info": event_data.get('tickets_info', "–í –Ω–∞–ª–∏—á–∏–∏")
        }

        event_obj, is_new = await rq.get_or_create_or_update_event(prepared_data)

        if event_obj:
            if is_new:
                events_created_count += 1
                print(f"‚úÖ –°–û–ó–î–ê–ù–û –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event_obj.title}")
            else:
                events_updated_count += 1
                print(f"üîÑ –û–ë–ù–û–í–õ–ï–ù–û —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ: {event_obj.title}")
    
    print("\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")
    print(f"–ù–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å–æ–∑–¥–∞–Ω–æ: {events_created_count}")
    print(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {events_updated_count}")


if __name__ == "__main__":
    asyncio.run(process_all_sites())