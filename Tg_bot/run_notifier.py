import asyncio
import os
import sys
from aiogram import Bot
from aiogram.enums import ParseMode
from dotenv import load_dotenv

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), 'Tg_bot')))

from app.database import requests as db
from app.handlers import format_events_for_response


async def send_notifications():
    load_dotenv()
    bot_token = os.getenv("BOT_TOKEN")
    if not bot_token:
        print("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")
        return

    bot = Bot(token=bot_token)
    print("–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")

    upcoming_events = await db.find_upcoming_events()

    if not upcoming_events:
        print("–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        await bot.session.close()
        return

    print(f"–ù–∞–π–¥–µ–Ω–æ {len(upcoming_events)} –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤...")

    notifications_sent = 0
    for event in upcoming_events:
        subscribers = await db.get_subscribers_for_event(event)
        if not subscribers:
            continue

        for user in subscribers:
            if event.venue and user.regions and event.venue.city in user.regions:
                print(f"  -> –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id} –æ —Å–æ–±—ã—Ç–∏–∏ '{event.title}'")
                try:
                    event_text = await format_events_for_response([event])
                    intro_text = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ!\n\n–°–∫–æ—Ä–æ —Å–æ—Å—Ç–æ–∏—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã:\n\n"

                    await bot.send_message(
                        chat_id=user.user_id,
                        text=intro_text + event_text,
                        parse_mode=ParseMode.HTML,
                        disable_web_page_preview=True
                    )
                    notifications_sent += 1
                    await asyncio.sleep(0.1)
                except Exception as e:
                    print(f"  -! –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")

    print(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notifications_sent}.")
    await bot.session.close()


if __name__ == "__main__":
    asyncio.run(send_notifications())